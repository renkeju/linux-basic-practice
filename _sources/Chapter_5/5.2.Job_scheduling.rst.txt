==========================
5.2 作业调度
==========================

什么是作业调度？
------------------------

作业调度(cron)提供了在指定时间执行某些命令的功能。用户通过crontab命令设置要定期运行的命令和时间。到了指定时间，crond守护进程将执行指定的命令。

cron功能也可用于系统维护。通过从cron启动的anacron，可以定期执行系统维护命令，如定期更新locate命令引用的文件搜索数据库或定期更换日志文件。at和batch只执行一次指定的命令。

要启动、停止和检查crond守护进程的状态，请按如下所示运行 systemctl 命令：

.. code-block:: none 

    # systemctl status crond ⬅ ①
    ● crond.service - Command Scheduler
    Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)
    Active: inactive (dead) since Mon 2020-03-02 13:57:34 CST; 3s ago
    Process: 537 ExecStart=/usr/sbin/crond -n $CRONDARGS (code=exited, status=0/SUCCESS)
    Main PID: 537 (code=exited, status=0/SUCCESS)

    Mar 02 13:57:34 zabbix-server.bih.cn systemd[1]: Stopping Command Scheduler...
    Mar 02 13:57:34 zabbix-server.bih.cn systemd[1]: Stopped Command Scheduler.
    Warning: Journal has been rotated since unit was started. Log output is incomplete or unavailable.
    # systemctl start crond ⬅ ②
    # systemctl status crond ⬅ ③
    ● crond.service - Command Scheduler
    Loaded: loaded (/usr/lib/systemd/system/crond.service; enabled; vendor preset: enabled)
    Active: active (running) since Mon 2020-03-02 13:57:47 CST; 1s ago
    Main PID: 26255 (crond)
    CGroup: /system.slice/crond.service
            └─26255 /usr/sbin/crond -n

    Mar 02 13:57:47 zabbix-server.bih.cn systemd[1]: Started Command Scheduler.
    Mar 02 13:57:47 zabbix-server.bih.cn systemd[1]: Starting Command Scheduler...
    Mar 02 13:57:47 zabbix-server.bih.cn crond[26255]: (CRON) INFO (RANDOM_DELAY will be scaled with factor 40% if used.)
    Mar 02 13:57:47 zabbix-server.bih.cn crond[26255]: (CRON) INFO (running with inotify support)
    Mar 02 13:57:47 zabbix-server.bih.cn crond[26255]: (CRON) INFO (@reboot jobs will be run at computer's startup.)
    # systemctl stop crond ⬅ ④ 
    # systemctl is-enabled crond ⬅ ⑤
    enabled

① 检查状态。在此示例中，crond守护进程当前状态已经停止，如 ``Active: inactive (dead)`` 所示。

② 启动 crond 守护进程

③ 检查状态。您将看到 crond 守护进程已经启动，显示为 ``Active: active (running)``

④ 停止 crond 守护进程

⑤ 使用 ``is-enabled`` 检验 crond 守护进程是否设置为自动启动

如果设置了自动启动设置，则显示为“enabled’；如果没有设置自动启动设置，则显示为“disabled”。如果没有设置自动启动设置，则可以在 ``systemctl enable crond`` 中设置自动启动设置。

crontab文件
------------------------

cron设置需要在配置文件crontab中写入执行命令。在此文件中注册“何时”、“执行那些命令”。crontab文件由两种工作方式：

* 用户crontab文件

    为用户提供的crontab文件。在 ``/var/spool/cron`` 目录下注册与每个用户的用户名称相同的文件，但是 ``/var/spool/cron`` 目录下的权限不允许创建普通用户权限的文件。因此，每个用户都需要使用 crontab 命令编辑自己的 crontab 文件。此外，用户的 crontab 文件由六个字段组成，这些字段以空格（空字符串）``分 时 天 月 周 命令`` 来定义。

* 系统 crontab 文件

    crontab 文件用于保存和管理系统所需的作业。它位于 ``/etc/crontab``，除了与用户 crontab 相同的的六个字段之外，还加入了一个额外的用户名称的字段： ``分 时 天 月 周 用户名 命令``，以指定要执行的用户名，并以空格作为分隔符。

系统的 crontab 文件与用户的 crontab 文件相同，但第六个字段的用户名称有所不同。

格式详细信息将在后面介绍：

以下是 ``/etc/crontab`` 文件的示例：在安装时， ``/etc/crontab`` 注释掉了变量设置。

.. code-block:: none 

    # /etc/crontab: system-wide crontab
    # Unlike any other crontab you don't have to run the `crontab'
    # command to install the new version when you edit this file
    # and files in /etc/cron.d. These files also have username fields,
    # that none of the other crontabs do.

SHELL=/bin/sh
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

# m h dom mon dow user  command
17 *    * * *   root    cd / && run-parts --report /etc/cron.hourly
25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.daily )
47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.weekly )
52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / && run-parts --report /etc/cron.monthly )

设置crontab文件
-----------------------

要设置crontab文件，请使用带有“-e”选项的crontab命令。这将启动编辑器进行编辑。

.. code-block:: none 

    crontabe 选项

.. csv-table:: none 
    :header: "选项", "说明"
    :widths: 5 20

    "-e", "编辑crontab"
    "-l", "查看crontab"
    "-r", "删除(所有)crontab"

.. note:: 您还可以使用提供的 crontab 文件来运行 ``crontab crontab文件`` 命令，而不使用选项。如果不想指定文件，请在编辑时使用“另存为”选项。

默认编辑器为vi，但也可以使用VISUAL或EDITOR环境变量指定不同的编辑器。以下时使用gedit启动的示例：

.. code-block:: none

    $ export EDITOR=gedit
    $ crontab -e

由于 ``/var/spool/cron`` 目录只能由root访问，因此crontab命令具有SUID（即使一般用户执行该命令，也将以该可执行文件的的所有者权限执行）

完成编辑并退出crontab命令之后，监视 ``/var/spool/cron`` 目录的crond的将检测到更改并重新装入新文件。

用户的crontab条目由六个字段组成：

.. csv-table:: 用户crontab文件格式
    :header: "格式", "说明"
    :widths: 5 10

    "分", "0-59"
    "时", "0-23"
    "日", "1-31"
    "月", "1-12"
    "周", "0-7（0或7表示周日）"
    "命令", "指定要执行的命令"

在第一个到第五个字段中指定“\*”将匹配到所有数字。除了“\*”，您还可以指定：

.. csv-table:: 指定时间的各种方式
    :header: "字段", "说明"
    :widths: 5 30

    "\*", "匹配所有数字"
    "\-", "指定示例：1. 当“小时”为15-17，表示15点、16点、17点。2. 当“星期”为1-4，表示星期一、星期二、星期三、星期四。"
    "\,", "指定示例：当“分钟”为 ``0,15,30,45`` 表示0分钟、15分钟、30分钟、45分钟"
    "\/", "数值间隔指定示例：1. 当“分钟”为10-20/2，表示10分钟到20分钟之间每间隔两分钟。2. 当前分钟为\*\/2，表示所有分钟内每间隔两分钟"

以下示例将cron设置为每两分钟运行一次，以便用户yuko将date命令结果追加到文件“/tmp/datefile”中。

.. code-block:: none

    [yuko@centos ~]$ crontab -e
    */2 * * * * /bin/date >> /tmp/datefile
    [yuko@centos ~]$ crontab -l
    */2 * * * * /bin/date >> /tmp/datefile

使用root用户身份，验证 ``/var/spool/cron`` 目录下是否存在用户yuko配置的cron配置文件。

.. code-block:: none 

    [root@centos ~]# ls -al /var/spool/cron/*
    -rw-------. 1 yuko yuko 15 Mar  3 20:11 renkeju

在用户 yuko 中，确保cron工作正常。运行后。按 [ctrl+c] 键返回到提示符。

使用cron限制用户
^^^^^^^^^^^^^^^^^^^^^^^^^^^

使用 ``/etc/cron.allow`` 和 ``/etc/cron.deny`` 文件为crontab命令设置对于普通用户的执行权限。

* 如果存在“cron.allow”，则文件中的用户可以使用cron。
* 如果没有“cron.allow”，并且存在“cron.deny”，则没有在“cron.deny”中列出的用户可以使用cron。
* “cron.allow”和“cron.deny”同时存在且都为空时，所有用户都可以使用cron。

在以下示例中，用户yuko删除了crontab文件。

.. code-block:: none 

    [yuko@centos ~]$ crontab -r
    [yuko@centos ~]$ crontab -l
    no crontab for yuko - using an empty one

校验用户yuko设置的cron配置文件是否已经从 ``/var/spool/cron`` 目录中删除。

.. code-block:: none 

    [root@centos ~]# ll -al /var/spool/cron/*
    ls: cannot access /var/spool/cron/*: No such file or directory

使用root用户身份将用户yuko设置为禁止使用cron。使用vi编辑器将yuko添加到“cron.deny”。

.. code-block:: none 

    [root@centos ~]# vi /etc/cron.deny
    yuko

再次尝试使用yuko用户配置cron，然后确任它无法执行。

.. code-block:: none

    [yuko@centos ~]$ crontab -e
    You (yuko) are not allowed to use this program (crontab)
    See crontab(1) for more information

使用anacron
^^^^^^^^^^^^^^^^^^^^^^^^^

anacron以每天的间隔定期执行命令。由系统管理员配置以进行系统维护。anacron由crond守护进程启动，而crond守护进程由 ``/var/spool/cron`` 、 ``/etc/crontab`` 和 ``/etc/cron.d`` 目录下的配置文件来设置如何运行。crond守护进程通过run-parts(/usr/bin/run-parts)脚本从 ``/etc/cron.d`` 下的配置文件启动 anacron。

anacron按照 ``/etc/anacrontab`` 中的设置运行 ``/etc/cron.daily`` （每天）、 ``/etc/cron.weekly`` （每周）、 ``/etc/cron.monthly`` （每月）目录下的命令。anacron进程不是驻留的，它将在执行命令后终止。

at服务
-------------------

使用at命令可以在指定的时间运行一次指定的命令。使用batch命令可以在系统负载较低时运行一次指定的命令。

由at或batch命令排队的作业由atd（/usr/sbin/atd）守护进程运行。

.. code-block:: none

    at [选项] 时间

.. code-block:: none 

    batch [选项]

对于使用两个命令保留的作业，at命令提供了以下的选项：

.. csv-table:: at命令选项
    :header: "选项", "等同命令", "说明"
    :widths: 5 5 20

    "-l", "atq", "运行显示用户队列中的作业（未运行的作业）如果root运行，则显示所有用户的作业"
    "-d", "atrm", "删除作业"

您可以指定时间和日期，例如：

.. csv-table:: 主要时间和日期说明
    :header: "指定时间", "说明"
    :widths: 10 15

    "HH:MM", "10:15表示10点15分"
    "midnight", "表示深夜（深夜0点）"
    "noon", "表示正午"
    "now", "表示当前时间"
    "teatime", "表示下午四点的下午茶时间"
    "am、pm", "10am表示上午十点"
    "MMDDYY、MM/DD/YY、MM.DD.YY", "121212表示2012年12月12日"
    "today", "表示今天"
    "tomorrow", "表示明天"

此外，还可以为这些关键字指定相对时间长度。要指定相对时间，请参照下表：

.. csv-table:: 指定相对时间
    :header: "格式示例", "说明"
    :widths: 10 15

    "now + 10 minutes", "在当前时间的10分钟后运行"
    "noon + 1 hour", "在13:00(中午的一小时后)运行"
    "next week + 3 days", "10天后运行命令"

以下示例将at命令设置为在一分钟后将date名流那个的结果输出到文件“/tmp/atfile”。运行at命令后并在 ``at>`` 提示符下输入命令，然后按 [ctrl+d] 退出。

要查看队列中等待运行的作业，请运行“atq”和“at -l”命令。

.. code-block:: none 

    # at now + 1 minutes
    at> date > /tmp/atfile
    at> <EOT>
    job 2 at Tue Mar  3 21:02:00 2020
    # atq
    3   Tue Mar  3 21:02:00 2020
    # at -l
    3   Tue Mar  3 21:02:00 2020

要删除排队等待运行的作业，请运行atrm或at -d命令。参数必须是作业的编号。

.. code-block:: none 

    # atq
    4       Tue Mar  3 22:03:00 2020 a root
    # atrm 4
    # atq

at命令用户使用限制
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

root始终允许执行at和batch命令。另一方面，可以使用 ``/etc/at.allow`` 和 ``/etc/at.deny`` 文件为普通用户设置执行权限限制。

在 ``/etc/at.allow`` 中注册的用户可以于宁at命令和batch命令。在 /etc/at.deny 中注册的用户将被拒绝运行at命令和batch命令。

.. csv-table:: 用户限制示例
    :header: "at.deny", "at.allow", "说明"
    :widths: 5 5 20

    "yuko", "无", "运行非yuko用户执行"
    "无", "yuko", "只能root和yuko执行，其他用户都不可以执行"
    "yuko", "mana", "只能root和yuko执行，其他用户都不可以执行"
    "无", "无", "仅限root用户，其他用户无法执行"

