===========================
2.1 了解引导顺序
===========================

引导顺序简介
-----------------------

启动系统的运行过程称为引导（Boot）。

而引导顺序是指，从接通电源到显示登录画面或登录命令界面为止，内核的初期设定、文件系统的安装、系统的各种管理程序（守护进程）的启动、网络的配置等。它是OS运行所需的所有设定的一系列流程。

因此，理解引导顺序也可以更深入的理解OS，而且在系统发生故障时对特定原因进行处理也是非常有帮助的。

.. image:: /_images/Chapter_2/2-1/2-1-1.启动顺序.png
    :align: center
    :width: 400px

BIOS/UEFI
-------------------------

PC接入电源后，BIOS或UEFI读取Linux的GRUB2引导加载器并启动。

这几年几乎所有PC都采用了UEFI，BOIS和UEFI在GRUB2启动后的处理记录是不相同的。

* BIOS

    BIOS(Basic Input/Output System)是编入并存储在PC硬件的非易失性存储器（NVRAM：Non-Volatile RAM）中的程序（固件）。打开PC的电源后，BIOS按照设定的设备的先后顺序，检索位于磁盘扇区最前端的MBR（Master Boot Record）中的引导加载器，并启动第一个检索到的程序。

* UEFI

    EFI(Extensible Firmware Interface)是BIOS的标准固件，但其扩展了功能，包括支持高容量磁盘（GPT: GUID Partition Table）、强化安全性（Secure Boot）、通过网络进行远程诊断等。它由Intel公司开发，现在被Unified EFI Forum管理。名称也变更为UEFI(Unified Extensible Firmware Interface)，但UEFI和EFI可以理解为具有相同含义的词汇。

    从UEFI引导OS时，按照设定再NVRAM中先后顺序，启动存储在磁盘中的EFI分区（EFI System Partition）中的引导加载程序。这一点与启动MBR内的引导加载程序的BIOS的方式不同。

* Secure Boot

    Secure Boot（安全引导）是通过编入UEFI的公钥，验证引导器中的数字证书来防止使用未经授权的程序（引导加载程序）启动的供应商的硬件。如果要使用安全引导，请在UEFI设置界面中启用安全引导设置。

    因为Linux的引导加载器GURB2中嵌入了数字证书，所以它与安全引导具有相同功能。如果只是在正常情况下使用Linux，在UEFI设定界面中关闭Secure Boot也是完全没有问题的。

BIOS中启动器的先后顺序，或是UEFI中引导加载器的先后顺序，都可以在接入电源后通过BIOS或UEFI的设定界面中进行设定。

大多数型号的PC都可以在开机后按功能键F2进入设定界面。

引导加载程序
---------------------

引导加载器可以将内核(vmlinux)和initramfs从磁盘加载到内存中，并调用其进行系统启动。

在近年来几乎在所有Linux发行版中，都采用GURB2作为引导加载器。GRUB2在UEFI和BIOS中都可以使用。

如上方启动界面中下方的信息所提示的那样，通过输入[e](Edit)键，可以编辑在内存中的grub.cfg文件，通过输入[c](command)键可以执行GRUB命令。

.. image:: /_images/Chapter_2/2-1/2-1-2.GRUB2启动界面.png
    :align: center
    :width: 400px

在下方示例中，展示了在BIOS环境中编辑CentOS内存中的grub.cfg文件，在没有桌面环境(multi-user目标)中启动（在EFI环境中行首命令“linux”为“linuxefi”）。

.. image:: /_images/Chapter_2/2-1/2-1-3.centos-multi-user.png
    :align: center
    :width: 400px

.. note:: 在以linux开头的行的行尾添加数字“3”，指定以multi-user目标启动（配置完成后按下[Ctrl]+[x]组合键）。


在下方示例中，展示了在BIOS环境中编辑Ubuntu内存中的grub.cfg文件，在无桌面环境(multi-user目标)中启动。

.. note:: 在以linux开头的行的行尾添加数字“3”，指定以multi-user目标启动（配置完成后按下[Ctrl]+[x]组合键）。

你可以在桌面环境中启动，或者在不使用桌面环境(multi-user目标)中启动，或者设置systemd的默认目标。综上所述，如果在GRUB2配置文件中指定，则可以修改先后顺序。

BIOS启动
^^^^^^^^^^^^^^^^^

GRUB2中包含了boot.img文件和core.img文件以及动态加载文件的多个模型。

GRUB2安装时boot.img被写入磁盘MBR扇区首部512字节中。同时，生成包含GRUB2的基础代码和/boot目录的文件系统模块（例如：xfs.mod）等的core.img，core.img写入MBR之后的扇区。

从BIOS中读取的boot.img导入core.img，core.img将放置于/boot/grub2/目录以下的模块(xx.mod)作为文件系统的文件进行读取，随后进行加载/链接。

EFI启动
^^^^^^^^^^^^^^^^^

GRUB2加载用FAT32或vfat格式化的EFI分区中EFI/centos/目录下的shim.efi文件和grubx64.efi文件。

这两个文件不是运行Linux的ELF，而是作为Microsoft Windows可执行文件的Portable Excutable（PE）。

* shim.efi

    EFI是参照引导入口调用的第一阶段的引导加载器。其安装了由Microsoft UEFI Signing Server签名的数字证书，支持安全引导功能。

    grubx64.efi文件调用第二阶段的引导加载程序。

* grubx64.efi

    它是从第一阶段引导加载器shim.efi到调用的第二阶段的引导加载器。其加载grub.cfg文件并显示GRUB2引导界面。

    根据grub.cfg配置将内核和initramfs加载到内存中，然后启动内核。如果要在不开启安全引导的情况下启动，您也可以直接从UEFI中调用grubx64.efi。

配置文件和目录
^^^^^^^^^^^^^^^^^^^^^^^

GRUB2的主要目录和配置文件如下所示：
CentOS和Ubuntu的/boot目录下的GRUB2目录有所不同。

* CentOS: /boot/grub2
* Ubuntu: /boot/grub

下表介绍了CentOS的示例：``/boot/grub2``

+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| 目录和配置文件                | BIOS | UEFI | 说明                                                                                                                                             |
+===============================+======+======+==================================================================================================================================================+
| /boot/grub2/                  | ○    | ○    | 配置文件和模块所在的目录                                                                                                                         |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /boot/grub2/grub.cfg          | ○    | ○    | 配置文件。grub2-install生成的/boot/efi/EFI/centos/grubx64.efi也参照此文件                                                                        |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /boot/grub2/i386-pc/          | ○    | —    | 此目录静态或动态链接到core.img的模块所在的目录。core.img也在此目录生成                                                                           |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /usr/lib/grub/i386-pc/        | ○    | —    | 模块所在的目录。在执行grub2-install命令时，在此目录下面的模块将复制到/boot/grub2/i386-pc/目录下                                                  |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /boot/grub2/x86_64-efi/       | —    | ○    | grubx64.efi中存放静态或动态链接的模块的目录。core.efi再此处生成并复制到/boot/efi/EFI/centos/grubx86.efi中                                        |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /usr/lib/grub/x86_64-efi/     | —    | ○    | 模块所在的目录。在执行grub2-install时，下面的模块将复制到/boot/grub2/x86_64-efi/目录下                                                           |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /boot/efi/EFI/centos/         | —    | ○    | 配置文件和引导加载程序所在的目录                                                                                                                 |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /boot/efi/EFI/centos/grub.cfg | —    | ○    | 配置文件。从grub2-efi安装包中安装的/boot/efi/centos/grubx64.efi                                                                                  |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /etc/grub.d/                  | ○    | ○    | 设定了配置文件grub.cfg生成时执行的脚本的数据库。其目录下的shell脚本参照/etc/default/grub文件中的变量进行设定，生成grub.cfg在下面的章节中进行讲解 |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| /etc/default/grub             | ○    | ○    | 在生成配置文件grub.cfg时，设定从/etc/grub.d/下的脚本引用的变量的值                                                                               |
+-------------------------------+------+------+--------------------------------------------------------------------------------------------------------------------------------------------------+

grub.cfg的设定用于GRUB2执行命令的参数。主要的GRUB2命令如下表所示:

+---------------------+---------------------+------+------+-----------------------------------------------------------+
| GRUB2命令（CentOS） | GRUB2命令（Ubuntu） | BIOS | UEFI | 说明                                                      |
+=====================+=====================+======+======+===========================================================+
| insmod              | insmod              | ○    | ○    | 模块的动态加载                                            |
+---------------------+---------------------+------+------+-----------------------------------------------------------+
| set                 | set                 | ○    | ○    | 参数的设定                                                |
+---------------------+---------------------+------+------+-----------------------------------------------------------+
| linux               | linux               | ○    | ○    | 以16位后路模式启动Intel架构的内核。内核随后转换为保护模式 |
+---------------------+---------------------+------+------+-----------------------------------------------------------+
| initrd              | initrd              | ○    | ○    | 在使用linux命令启动内核时，指定内核使用initramfs          |
+---------------------+---------------------+------+------+-----------------------------------------------------------+
| linuxefi            | —                   | —    | ○    | 将UEFI参数传递到内核，启动内核                            |
+---------------------+---------------------+------+------+-----------------------------------------------------------+
| initrdefi           | —                   | —    | ○    | 用linuxefi命令启动内核时，指定内核使用initramfs           |
+---------------------+---------------------+------+------+-----------------------------------------------------------+

下面是以BIOS环境下的CentOS的grub.cfg文件为例:

.. code-block:: bash

    ...省略...
    ### BEGIN /etc/grub.d/10_linux ###
    insmod part_msdos
    insmod ext2
    set root='hd0,msdos1'
    if [ x$feature_platform_search_hint = xy ]; then
    search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1 --hint='hd0,msdos1'  39577ee2-6cb9-49e7-914c-92a0bd7a292d
    else
    search --no-floppy --fs-uuid --set=root 39577ee2-6cb9-49e7-914c-92a0bd7a292d
    fi
    ...省略...


下面是以UEFI环境下的CentOS的grub.cfg文件为例:

.. code-block:: bash

    ...省略...
    ### BEGIN /etc/grub.d/10_linux ###
    insmod part_gpt
    insmod ext2
    set root='hd0,gpt2'
    if [ x$feature_platform_search_hint = xy ]; then
    search --no-floppy --fs-uuid --set=root --hint-bios=hd0,gpt2 --hint-efi=hd0,gpt2 --hint-baremetal=ahci0,gpt2  b66a06d8-fa55-4365-8eeb-186d8486026c
    else
    search --no-floppy --fs-uuid --set=root b66a06d8-fa55-4365-8eeb-186d8486026c
    fi
    ...省略...

下面是以UEFI环境下的CentOS的grub.cfg文件为例:

.. code-block:: bash

    ...省略...
    ### BEGIN /etc/grub.d/20_memtest86+ ###
    menuentry 'Memory test (memtest86+)' {
        insmod part_msdos
        insmod ext2
        set root='hd0,msdos1'
        if [ x$feature_platform_search_hint = xy ]; then
        search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1  fcdd3141-61c0-4969-bac5-26ed9ceb97bc
        else
        search --no-floppy --fs-uuid --set=root fcdd3141-61c0-4969-bac5-26ed9ceb97bc
        fi
        knetbsd	/boot/memtest86+.elf
    }
    ...省略...

grub2-mkconfig/grub-mkconfig命令
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

grub2-mkconfig是用于生成CentOS配置文件grub.cfg的命令，grub-mkconfig是用于生成Ubuntu配置文件grub.cfg的命令。

在没有自定义变量的情况下执行grub2-mkconfig或grub-mkconfig时，此命令会将生成配置文件的内容打印在屏幕中（标准输出）。为了保存grub.cfg配置文件，使用“>”右尖括号符号将打印的内容重定向到文件中。

* CentOS：``grub2-mkconfig > grub.cfg``
* Ubuntu：``grub-mkconfig > grub.cfg``

.. code-block:: none

    # cd /boot/grub2/
    # cp grub.cfg grub.cfg.back ➜ 为了慎重起见，先把当前文件做备份
    # grub2-mkconfig > grub.cfg 
    Generating grub configuration file ...
    done


.. code-block:: none

    $ cd /boot/grub/
    $ sudo cp grub.cfg grub.cfg.back ➜ 为了慎重起见，先把当前文件做备份
    $ sudo grub-mkconfig | sudo tee grub.cfg

或者您也可以通过参数“-o”指定并执行输出到文件。

* CentOS：``grub2-mkconfig -o grub.cfg``
* Ubuntu：``grub-mkconfig -o grub.cfg``

在生成的配置文件grub.cfg中，配置编号从“0”开始，但是请注意，配置文件grub.cfg中的分区编号是从“1”开始，而不是从“0”开始。

如果因为配置文件grub.cfg丢失而引起Linux系统无法启动的故障的情况下，可以从DVD或CD-ROM中以读写模式启动并执行grub2-mkconfig或grub-mkconfig命令生成配置文件grub.cfg。

grub2-mkconfig和grub-mkconfig命令从/etc/grub.d/目录下的shell脚本获取配置。每个shell脚本引用/etc/default/grub文件以生成配置文件grub.cfg中各部分的内容。

以下是位于CentOS中/etc/grub.d/目录下的shell脚本。Ubuntu与之相同。

“10_linux”生成当前内核的启动行和initramfs的相关内容。

“30_os-prober”生成在磁盘中查找并安装操作系统的的相关内容。

.. code-block:: none

    # ls -F /etc/grub.d/
    00_header*  01_menu_auto_hide*  10_linux*      20_ppc_terminfo*  30_uefi-firmware*  41_custom*
    00_tuned*   01_users*           20_linux_xen*  30_os-prober*     40_custom*         README

.. note:: 关于命令行示例中使用的“cd”、“cp”、“ls”等Linux命令，在随后的章节中会做详细介绍。另外，本书中使用CentOS和Ubuntu在配置上基本是相通的，所以更多使用CentOS做为示例。

内核
-----------------------

内核在系统启动时被加载到内存中，然后其常驻内存管理CPU和内存等系统资源并控制设备，调度进程等。内核为操作系统提供的基本功能，它决定了系统的功能与性能、并赋予Linux系统特征，它就是操作系统的核心程序。

内核的构成如下所示：

* 进程管理、用户管理、时钟管理、内存管理等主要部分
* 编译时静态链接到硬件的内核模块
* 编译时不链接到硬件，在系统启动时或启动后，在必要时读取并动态态链接到被硬件需要的内核模块

.. image:: /_images/Chapter_2/2-1/2-1-4.内核构成.png
    :align: center
    :width: 600px

可加载内核模块(Loadable Kernel Module)，可动态加载（loadable）从这个词义上来说，它的名字是这样的，其缩写为LKM。内核加载模块（Kernel Loadable Module）其缩写为KLM，或者被称为内核模块。

内核在/boot目录下存放，文件名称为“vmlinux-version”，此文件为gzip压缩文件。

不同类型的可加载内核模块存放在/lib/modules/version/kernel目录下的子目录。

引导顺序中内核的处理过程
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

存储器中的内核在自动解压缩后由引导加载器GRUB2加载并执行内核中的初始化操作，其后内核解压缩并展开initramfs使其在内存中加载并运行，最后再运行systemd。

.. image:: /_images/Chapter_2/2-1/2-1-5.引导顺序中的内核处理过程.png
    :align: center
    :width: 600px

* 内核中的初始化操作

    内核在启动时对自己进行以下初始化操作：

    1. 初始化分页机制
    2. 初始化调度程序
    3. 初始化计时器
    4. 初始化中断机制

* initramfs执行

    initramfs(Inital RAM FS)是将磁盘中的根文件系统装载到根“/”、在引导时加载到内存中的袖珍文件系统。

    它创建配置包含了磁盘设备驱动和文件系统模块的目录，用于访问创建在磁盘中的根文件系统。它是一个gzip压缩文件，可以使用cpio将其归档。他也被称为initrd（Initial RAM Disk）初始RAM磁盘。

    initramfs文件在/boot目录下名为“initramfs-version”(CentOS)，或者名为“initrd.img-version”（Ubuntu）。

    内核使用initramfs执行以下操作：

    1. 将部署在内存中的initramfs加载为临时根文件系统
    2. 启动initramfs中的init(systemd)程序，通过各种服务安装磁盘内的根文件系统
    3. 将根文件系统从initramfs切换到磁盘中的根文件系统

    .. note:: 有关cpio和gzip的相关信息，请参考第六章。

* systemd再执行

    内核重新运行磁盘中的根文件系统的/sbin/init程序。然后链接/sbin/init/lib/systemd/systemd程序服务，所以systemd被再次执行。

systemd
--------------------------

systemd是内核生成的第一个用户进程，所以进程编号（PID）为“1”。

systemd根据配置文件，开始按照启动顺序依次启动，建立系统用户图形界面目标（graphical.target）或多用户目标（multi-user.target）。我们能占用哪个目标呢？只有默认目标(default.target)可以在配置中指定。

在图形界面目标（graphical.target）的场景下，可以显示图形登录界面，登录桌面环境。

在多用户目标（multi-user.target）的场景下，将会显示登录命令行界面，登录到没有桌面环境的CUI环境中。

目标(target)定义系统的状态，比如提供什么样的服务。systemd与早前Linux系统中使用的 SysV init功能相同。

除了graphical.target和multi-user.target之外，还有用于维护系统的rescue目标（rescue.target）等其他多种目标。另外也有停止和重启系统的目标，于此我们在后面的章节再进行讲解。

.. image:: /_images/Chapter_2/2-1/2-1-6.systemd的启动顺序.png
    :align: center

+------------------+-----------------------------------------------------------------------------------------------+----------+
| 目标             | 说明                                                                                          | SysV级别 |
+==================+===============================================================================================+==========+
| default.target   | 系统启动时的默认目标，系统在这个目标中启动，通常指向multi-user.target或graphical.target的链接 | —        |
+------------------+-----------------------------------------------------------------------------------------------+----------+
| sysinit.target   | 进行系统启动时初期阶段设置目标                                                                | —        |
+------------------+-----------------------------------------------------------------------------------------------+----------+
| rescue.target    | 发生故障时或维护时管理者使用的目标。管理员输入root密码进行登录，然后进行维护工作              | 1        |
+------------------+-----------------------------------------------------------------------------------------------+----------+
| basic.target     | 在系统启动时进行基本设定的目标                                                                | —        |
+------------------+-----------------------------------------------------------------------------------------------+----------+
| multi.target     | 基于字符命令的多用户的目标                                                                    | 3        |
+------------------+-----------------------------------------------------------------------------------------------+----------+
| graphical.target | 设置图形界面的目标                                                                            | 5        |
+------------------+-----------------------------------------------------------------------------------------------+----------+

在系统启动完成的阶段，会产生很多进程，systemd是在所有进程的结构中的根(root)。

.. attention:: SysV init所使用的运行级别是定义运行时服务的状态（级别：run）的术语。运行级别“0”为停止系统，运行级别“3”（multi-user target）为字符终端登录，运行级别“5”（graphical target）为GUI图形界面登录，所有运行级别在systemd中都可以找到相对应的目标。

查看和设置默认目标
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

通过systemd命令可以查看那些目标被设置在default.target上，或更改default.target的设置。

下面是使用systemctl的子命令get-default显示默认目标或使用子命令set-default更改默认目标的示例：

.. code-block:: none

    # systemctl get-default ➜ 查看默认目标
    graphical.target
    # systemctl set-default multi-user.target ➜ 更改默认目标为字符终端登录
    Removed /etc/systemd/system/default.target.
    Created symlink /etc/systemd/system/default.target → /usr/lib/systemd/system/multi-user.target.
    # systemctl get-default ➜ 查看默认目标
    multi-user.target

在引导加载程序GRUB2界面中指定目标
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在引导加载程序的内核命令选项systemd.unit中，您也可以指定``systemd.unit=multi.target``。

或者，通过在内核命令行行尾添加运行级别“3”，也可以指定运行级别。通常在这种配置的情况下，此处的default.target的连接符号优先生效。

运行状态下目标的变更
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

使用systemctl命令的子命令isolate可以将当前正在运行的目标变更为另一个目标，执行init命令也同样生效。

+-------------------------+-------------------------------------+----------+
| 变更目标                | systemctl isolate命令               | init命令 |
+=========================+=====================================+==========+
| 变更为graphical.targer  | systemctl isolate graphical.target  | init 5   |
+-------------------------+-------------------------------------+----------+
| 变更为multi-user.targer | systemctl isolate multi-user.target | init 3   |
+-------------------------+-------------------------------------+----------+
| 变更为rescue.targer     | systemctl isolate rescue.target     | init 1   |
+-------------------------+-------------------------------------+----------+

登录
-----------------------

当系统引导完成后，窗口将会显示登录界面或字符登录提示。在此输入用户名和密码进行登录。

下面展示在救援目标，多用户目标和图形目标上启动时每个界面的显示的示例。

以下是CentOS中的救援目标的登录界面。

.. code-block:: none

    Welcome to rescue model Type "systemctl default" or ^D to enter default mode.
    the "journalctl -xb" to view system logs. Type "systemctl reboot" to reboot.
    Give root password for maintenance
    (or type Control-D to continue): ➜  在这里输入root密码

以下是CentOS中的救援目标的登录界面。

.. code-block:: none

    You are in rescue mode. After logging in, type "journalctl -xb" to view 
    system logs. "systemctl reboot" to reboot, "systemctl default" ro "exit" 
    to boot into default mode.
    Give root password for maintenance
    (or type Control-D to continue): ➜  在这里输入root密码

在上述的界面中，输入root的密码进行登录。

下面是再多用户目标（没有桌面环境）下启动CentOS时显示的界面的示例。

.. code-block:: none

    CentOS Linux 8 (Core)
    Kernel 4.18.0-80.11.2.el8_0.x86_64 on an x86_64

    Activate the web console with: systemctl enable --now cockpit.socket

    centos login: ➜ 在此输入用户名登录

下面是再多用户目标（没有桌面环境）下启动Ubuntu时显示的界面的示例。

.. code-block:: none

    Ubuntu 18.04.3 LTS ubuntu tty1

    ubuntu login: ➜ 在此输入用户名登录

以下是以图形界面目标启动CentOS或Ubuntu时默认情况下的示例（CentOS和Ubuntu中登录界面是相同的）。

.. image:: /_images/Chapter_2/2-1/2-1-7.图形目标登录界面.png
    :align: center
    :width: 600px

在shell中的操作
----------------------------

登录后，在图形目标的情况下会显示图形界面桌面环境。在多用户目标和救援目标情况下，会显示基于shell的命令行提示符。

如果需要在桌面环境中执行Linux命令，请启动虚拟终端。如果没有桌面环境，请直接再shell命令提示符下执行命令。

.. image:: /_images/Chapter_2/2-1/2-1-8.在GNOME虚拟终端中执行命令.png
    :align: center
    :width: 600px

下面是再没有桌面环境的CUI界面中，以“centos”用户作为登录用户的示例。登录后运行了以下命令：

* whoami：查看当前用户名
* pwd：查看当前所在目录路径

.. image:: /_images/Chapter_2/2-1/2-1-9.CUI中执行命令.png
    :align: center