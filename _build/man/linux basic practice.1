.\" Man page generated from reStructuredText.
.
.TH "LINUX BASIC PRACTICE" "1" "2019 年 11 月 24 日" "1.0" "《Linux 基础实践入门》"
.SH NAME
linux basic practice \- linux basic practice Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH 第一章 LINUX 概述
.SS 1.1 认识Linux
.SS 操作系统
.sp
现在在我们的日常生活中，各种各样的软件为我们提供了丰富的功能。比如发送邮件、浏览网页、编辑视频或音频、编辑文档文件和管理日程安排等等。
.sp
计算机硬件分为很多种类，比如CPU、内存和硬盘等，而且其功能也各不相同。对于普通用户来说，计算机的结构非常复杂。普通用户并不具备直接操作计算硬件的能力，需要由程序来帮助普通用户使用计算机的硬件。
.sp
操作系统（以下简称“OS”）主要作用就是有效的利用各种硬件的功能与性能，使开发者或计算机操作者更容易开发应用程序或使用软件。但OS只提供运行硬件的基础功能，软件开发者可以在OS之上开发出各种功能丰富且易于使用的软件，让普通用户能够轻松的使用计算机来工作。
.sp
优秀的OS提高了开发人员的开发效率，同样也使得用户能够花费更少的精力学习使用所需的功能。
.sp
目前常见的OS代表有Linux、Microsoft Windows、macOS等。
[图片： "1-1-1 OS的构成"]
[图片]
.INDENT 0.0
.IP \(bu 2
OS的作用
.sp
OS由内核提供最基础的操作系统的功能，再加以一些具有各种功能的程序组成。内核可以管理所有硬件方面的资源调用，其包括利用CPU、管理内存、管理外部设备、管理机箱和中断硬件等。内核提供了各种各样的接口和库为开发者使用，所以开发者可以通过程序操作内核，而普通用户可以通过程序提供的服务来调用硬件资源。
.IP \(bu 2
应用程序种类
.sp
用户程序是指针对特定的用途而开发的软件，具体功能取决于用户用途。系统应用程序一般都是OS中包含的程序包组，它是由程序供应商打包在一起，通过委托开发或自行开发等制作和发布。
.IP \(bu 2
Linux操作系统构成
.sp
Linux操作系统由Linux内核、库和用户控制平台组成。
.UNINDENT
[图片： "1-1-2 Linux操作系统构成"]
[图片]
.SS Linux系统
.sp
Linux系统的内核是为OS提供最基本功能的程序，例如CPU的调用、内存管理、进程管理等等。OS的启动是从Linux内核被读取后由内核引导系统开始的。
.INDENT 0.0
.IP \(bu 2
可加载模块
.sp
在系统启动后，内核模块根据程序的需要从磁盘读取到内核地址空间。由于在内核中针对各种厂商不同的网络硬件对应有不同的驱动器（控制硬件的程序），所以网络硬件模块作为可加载模块来提供。
.IP \(bu 2
库
.sp
库作为开发程序时所需函数的通用素材。在Linux中，系统提供了GNU开发的库，以及X.Org开发的X库。
.IP \(bu 2
X Window System
.sp
X Window System程序由X.Org组织开发的X服务和X客户端构成。在X Window System上，桌面环境得以以统一的设计和操作作为基础，为开发者提供了菜单、图标和后退回台窗口等服务。
.IP \(bu 2
程序开发环境
.sp
在程序开发所需的解释程序中，Linux系统可以提供Bash、Python、Perl语言等，作为编译器，可以提供C、C++、Java等开发环境。
.IP \(bu 2
服务程序
.sp
在Linux中可以提供各种各样的后台服务。例如，有ssh交换通讯数据的程序、提供打印机服务的程序等。
.IP \(bu 2
命令、实用程序
.sp
在桌面环境中，有提供文字处理和计算表格等办公工具套件（LibreOffice），具有高级功能图形编辑软件（GIMP）、Web浏览器（Chrome）、邮件工具（雷鸟邮件）、系统管理工具（系统监视器）等。另外，还为一般用户提供了用户管理、网络管理、数据库管理等用途的命令。
.UNINDENT
.SS Linux发行版
.sp
1991年，自李纳斯.托瓦兹在互联网上公开了第一版Linux内核以来，Linux内核就吸引了众多开发人员参与其中并不断发展。
.sp
但是仅有Linux内核还不能称为OS，除此之外还需要有由源代码通过比较生成的可执行文件，程序可使用的程序库，为用户提供接口的Shell等诸多软件才能将Linux视为完整的OS，除此之外OS中还包含了从Shell启动的命令、工具，以及将它们安装到磁盘的安装程序。
.sp
企业、组织或个人可以为Linux内核集成上述软件并制作成OS进行发布（Distribute），所发布Linux系统被称为**发行版**(Distribution或Distro)。
.sp
在Linux操作系统中主要由免费软件和开源软件组成，下面我们简单描述Linux系统常见的软件类型：
.INDENT 0.0
.IP \(bu 2
自由软件
.sp
在GNU通用公共许可证（英语：GNU General Public License，缩写GNU GPL 或 GPL）下分发的软件称为“自由软件”，使用通用公共许可证编写的软件统称为自由软件。GPL的主要条件内容包括：
.INDENT 2.0
.IP \(bu 2
如果要发布编译源代码生成的二进制文件（可执行程序），则该源代码也必须公开。
.IP \(bu 2
可自由开发、变更、发布和使用。
.IP \(bu 2
使用GPL发布的软件为基础，再次进行开发和变更的软件也必须基于GPL发布
.UNINDENT
.sp
GPL的这一独特规定保证了软件可以再次分发，达到共享和发展软件目的。大多数Linux系统中的主要软件是在GPL下分发的免费软件。
[图片]
.IP \(bu 2
开源软件
.sp
源代码要求公开，但再次分发自由的软件一般被称为“开源软件”。在开源倡议（Open Source Initiative:OSI）中，根据“开发源代码定义”（The Open Source Definition:OSD），规定了开源软件的主要条件内容如下：
.INDENT 2.0
.IP \(bu 2
允许再次分发
.IP \(bu 2
程序的可执行文件在发布时，必须也同时发布完整的源代码
.IP \(bu 2
如果对软件进行了修改，不必与修改前的代码使用同样的许可证
.UNINDENT
.sp
开源软件的规定变更了GPL中“以GPL为基础发布的软件、再次发布的变更软件必须同样使用GPL”这样的要求。
.sp
如果您修改了使用开源许可证进行分发的软件，您也可以通过其他许可证再次分发。在某些情况下，对于想要隐藏源代码的公司来说，这是一个易于采用的协议。
.sp
X.Org开发的X Window System软件为“MIT许可证”，Mozilla组织开发的Web浏览器Firefox为“MPL（Mozilla Public License）”，构成Linux系统的一部分软件也都以开放形式发布。
[图片]
.IP \(bu 2
再造软件
.sp
再造软件在分发的情况下是不允许修改或复制的软件。发布者只提供二进制文件（可执行程序），不公开源代码。一般情况下，获取再造软件是收费的。Microsoft Windows和在其系统上运行的收费软件都是再造软件。
.sp
在一部分Linux发行版中，有时会包含再造软件。如果擅自将原程序软件复制散布，恐怕会涉及到著作权，所以需要注意。
[图片]
.UNINDENT
.sp
Linux中的软件多是通过自由软件和开源软件的许可证发布的，可以自由地进行再次发布和变更。因此，现在有RedHat Enterprise Linux(RHEL)、CentOS（RHEL下游发行版）、Ubuntu、Debian/GNU Linux等数百种发行版。
.sp
用户可以考虑自己的喜好和使用目的，从中选择合适的版本。这也是Linux最大的特征之一。
[图片]
.sp
内核、库、Shell和基本命令都是OS所必备的组件，在任何发行版中都是通用的（不同发行版所采用的软件版本可能会有所差异）。
.sp
各种Linux发行版最大的区别在于软件包的管理方式和桌面环境。
.SS 包管理器
.sp
包管理器的类别有RedHat系的rpm命令管理方式，Ubuntu/Debian系的dpkg命令管理方式，以及其他的方式。不同的包管理器所管理的软件包的封装格式也各有不同。
.sp
另外，从网络上的存储库安装、更新的方式中，有RedHat系的dnf（早期版本为yum）命令管理方式，Ubuntu/Debian系的apt命令管理方式，以及除此之外的其他方式。
.sp
存储库（Repoitory或Repo）是指软件包所在的存储位置。Linux系统通常使用在网络上的存储库，但也可以将本地DVD、CD\-ROM或ISO镜像作为存储库。
.SS 主要软件包格式与管理命令
.TS
center;
|l|l|l|.
_
T{
T}	T{
RedHat系
T}	T{
Ubuntu/Debian系
T}
_
T{
包格式
T}	T{
rpm格式
T}	T{
deb格式
T}
_
T{
包管理命令
T}	T{
rpm命令
T}	T{
dpkg命令
T}
_
T{
利用存储库的包管理命令
T}	T{
dnf(yum)命令
T}	T{
apt命令
T}
_
.TE
.SS 桌面环境
.sp
桌面环境提供了一套统一风格的易用性设计，其中包括菜单、文件管理器、Web浏览器、邮件工具和应用托管程序，以及系统管理程序。
.sp
现在，使用最为广泛的桌面环境是GNOME，但是还有很多其他独具特色的桌面环境。
.sp
Linux发行版可以根据其用途粗略分类为服务器和台式机，面向个人和面向企业。
[图片]
.SS 发行版份额
.sp
在这里对各发行版的使用状况、以及Web服务器的市场占有率、开发平台的份额、云实例的份额为例进行介绍。
.INDENT 0.0
.IP \(bu 2
Web服务器
.sp
根据Q\-Success公司运营的W3Techs.com调查，在运行Web服务器的Linux系统的市场占有率中，Ubuntu为第一位，Debian为第二位，CentOS（Redhat系）为第三位，接着是RedHat(Redhat Enterprise Linux:RHEL)，Gentoo等。
[图片]
.sp
\fB注解:\fP
.INDENT 2.0
.INDENT 3.5
W3Techs.com的调查是根据亚马逊的子公司Alexa Internet公司的Web流量的统计信息为基础进行分析。
.UNINDENT
.UNINDENT
.IP \(bu 2
开源云平台的市场占有率
.sp
在开源云平台OpenStack中，有RedHat、SUSE、NEC、IBM、富士通、华为等100多家公司参与了开发，并且此项目支持的企业超过500家。
.sp
在OpenStack平台中运行的Linux发行版市场份额为：CentOS位居第一，Debian为第二位，Fedora Server为第三位，接着是RedHat Enterpricse Linux(RHEL)，SUSE Linux Enterprise Server(SLES)等。
[图片]
.IP \(bu 2
公有云实例份额
.sp
根据The Cloud Market(\fI\%https://thecloudmarket.com\fP)的统计数据，除在Amazon Elastic Compute Cloud(EC2)实例中运行的Amazon Linux AMI镜像（云上运行的虚拟OS），在EC2中的Linux操作系统类别中，Ubuntu位于第一位，Debian为第二位，Microsoft Windows是第三位。接下来是RedHat（RHEL)和CentOS(RedHat系)等。
[图片]
.UNINDENT
.SS 发行版人气度
.sp
在记载了Linux发行版等开源操作系统信息的网站DistroWatch（\fI\%https://distrowatch.com\fP）中，可以看到为Linux发行版进行人气度排序的网页，面向个人配置的Linux Mint、elementary OS、Manjaro Linux等长久的排在了前几位。
[图片]
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
DistroWatch.com通过对使用同一IP地址访问Linux发行版网站每天的点击量进行排名统计。
.UNINDENT
.UNINDENT
.SS 发行版种类
.sp
我们可以将主要发行版分为企业用户、一般用户（RedHat系）、普通用户（Ubuntu/Debian）、通用用户（专有软件包管理分发）来介绍其特性。
.INDENT 0.0
.IP \(bu 2
面向企业的发行版
.sp
面向企业的代表性发行版有 \fBRedHat Enterprise Linux\fP （RHEL）和 \fBSUSE Linux Enterprise Server\fP （SLES）。其主要特征如下：
.INDENT 2.0
.IP \(bu 2
采用付费订阅协议（期限为1年、3年等），为企业提供了二进制文件（可执行程序）的发布、更新、支持、技术信息等服务。对于RHEL，如果没有预定合同，则无法获取二进制文件。SLES注册（免费）可获得试用版本。
.IP \(bu 2
由于程序包数量限定了支持范围，所以其软件的调试配置比面向一般用户的发行版的较少。
.IP \(bu 2
管理类的技术文档完善。
.IP \(bu 2
采用企业所需的高容量、高读写和高性能的文件系统。
.IP \(bu 2
对与高可用性集群、存储、统一认证和私有云等产品有需求的企业都可以在面向企业的发行版上获取服务
.UNINDENT
.TS
center;
|l|l|l|l|l|l|l|.
_
T{
发行版
T}	T{
最新版本
T}	T{
最新版本发布日期
T}	T{
包管理器
T}	T{
标准文件系统
T}	T{
标准桌面环境
T}	T{
特征
T}
_
T{
RedHat Enterprise Linux
T}	T{
8
T}	T{
2019年5月
T}	T{
dnf
T}	T{
xfs
T}	T{
GNOME3
T}	T{
开发商：RedHat公司
1. 可以使用其他桌面环境，如KED、Xfce
2. 通过dnf命令使用存储库中的更新
3. dnf为新一代的rpm软件包管理器。dnf包管理器克服了dnf包管理器的一些瓶颈，提升了包括用户体验，内存占用，依赖分析，运行速度等多方面的内容。
T}
_
T{
SUSE Linux Enterprise Server
T}	T{
15
T}	T{
2018年7月
T}	T{
yum
T}	T{
Btrfs
T}	T{
GNOME3
T}	T{
开发商：EQT公司
1. 在ISO镜像中，除了服务器版本之外，还有SUSE Linux Enterprise Desktop
2. SUSE可以使用专有的GUI管理工具YaST
3. 通过SUSE独立的zypper命令（而非yum命令）更新存储库
T}
_
.TE
.IP \(bu 2
面向一般用户（RedHat系）发行版
.sp
在面向一般用户的发行版中，一般将使用yum作为包管理器的发行版大致的归为RedHat系。
.TS
center;
|l|l|l|l|l|l|.
_
T{
发行版
T}	T{
最新版本
T}	T{
最新版本发布日期
T}	T{
标准文件系统
T}	T{
标准桌面环境
T}	T{
特征
T}
_
T{
CentOS
T}	T{
8.0
T}	T{
2019年9月
T}	T{
xfs
T}	T{
GNOME3
T}	T{
开发商：CentOS项目
1. RedHat Enterprise Linux(RHEL)的复刻版本
2. 在RedHat公司的支持下，以RHEL为基础，除去了RedHat公司的Logo，开发CentOS项目
T}
_
T{
Scientific Linux
T}	T{
7.7
T}	T{
2019年8月
T}	T{
xfs
T}	T{
GNOME3
T}	T{
开发商：CERN、Fermilab
1. RedHat Enterprise Linux(RHEL)的复刻版本
2. 以RHEL的源代码为基础，除去了RedHat公司的Logo，CERN和Fermilab共同开发。
T}
_
T{
Fedora
T}	T{
31
T}	T{
2019年10月
T}	T{
ext4
T}	T{
GNOME3
T}	T{
开发商：Fedora项目
1. RHEL的开发版
2. 桌面环境还可以使用KDE、Xfce、MATE、Cinnamon、LXQt、LXDE和SOAS。
T}
_
T{
openSUSE
T}	T{
leap 15.1
T}	T{
2019年5月
T}	T{
Btrfs
T}	T{
安装时进行选择
T}	T{
开发商：openSUSE项目
1. openSUSE项目从2015年开始发行两种配置、Leap和Tumbleweed
2. Tumbleweed作为SLES的开发版本滚动更新，Leap是一个SLES作为基础发行。
T}
_
.TE
.IP \(bu 2
面向一般用户（Ubuntu/Debian）发行版
.sp
在面向一般用户的发行版中，一般将使用dpkg作为包管理器的发行版大致归为Ubuntu/Debian系。
.TS
center;
|l|l|l|l|l|l|.
_
T{
发行版
T}	T{
最新版本
T}	T{
最新版本发布日期
T}	T{
标准文件系统
T}	T{
标准桌面环境
T}	T{
特征
T}
_
T{
Ubuntu
T}	T{
19.04
T}	T{
2019年10月
T}	T{
ext4
T}	T{
GNOME3
T}	T{
开发商：Ubuntu项目
1. Canonical公司提供的Ubuntu项目以DebianGNU/Linux为基础进行开发
2. 通常每6个月发行一个新版本，支持周期为9个月，LTS（Long Term Support）是每两年发行一次，支持周期为5年
3. 桌面环境可以使用KDE、Xfce、LXDE和MATE
T}
_
T{
DebianGNU/Linux
T}	T{
10
T}	T{
2019年7月
T}	T{
ext4
T}	T{
安装时选择
T}	T{
开发商：Debian项目
1. 开发者遵循Debian社群契约及Debian自由软件指导方针，定义了开发Debian的基本承诺
2. 尊重GNU项目的精神，积极采用GNU开发的软件
3. 系统名称不是“Linux”而是“GNU/Linux”，发行版名称为“DebianGNU/Linux”
4. 软件包管理器dpkg于1994年有Debian项目的成员开发并发布
5. 在安装过程中，可以选择的桌面环境有：GNOME、Xfce、KDE、Cinnamon、MATE和LXDE
T}
_
.TE
.IP \(bu 2
面向通用用户（专用软件包管理器）发行版
.sp
除了前面所述的RedHat系、Ubuntu/Debian系之外，一般将使用独立包管理器的发行版作为普通用户分类。
.TS
center;
|l|l|l|l|l|.
_
T{
发行版
T}	T{
最新版本
T}	T{
最新版本发布日期
T}	T{
标准文件系统
T}	T{
特征
T}
_
T{
Gentoo Linux
T}	T{
.INDENT 2.0
.IP \(bu 2
.UNINDENT
T}	T{
滚动发布
T}	T{
Protage
T}	T{
开发商：Gentoo Foundation
1. 不属于RedHat系也不属于Debian/Ubuntu系的独立发行版
2. 软件不是二进制代码，而是需要通过源代码进行安装
3. 软件包管理系统Portage使用脚本编译源代码和安装软件包
4. 其用途是可以面向各种用途进行定制
T}
_
T{
Arch Linux
T}	T{
.INDENT 2.0
.IP \(bu 2
.UNINDENT
T}	T{
滚动发布
T}	T{
pacman
T}	T{
开发商：Aaron Griffin，其他
1. 不属于RedHat系也不属于Debian/Ubuntu系的独立发行版
2. 简便轻量
3. 使用安装ISO镜像进行安装操作，手动进行分区、文件系统的初始化和分类、安装包、编辑和配置文件
4. 包管理器是ArchLinux独有的pacman
5. 命令行界面（Command Line Interface）
6. 也可以从存储库中安装桌面环境
T}
_
T{
Manjaro
T}	T{
.INDENT 2.0
.IP \(bu 2
.UNINDENT
T}	T{
滚动发布
T}	T{
pacman
T}	T{
开发商：Manjaro团队
1. 基于ArchLinux的一般用户对用户友好的发行
T}
_
.TE
.UNINDENT
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
滚动发布版本不是发行版的版本号，而是按每个单独的程序包版本进行管理，它可以随时更新软件包。滚动发布的Linux发型版可以从官方网站下载定期更新的发行版安装镜像。
.UNINDENT
.UNINDENT
.SS 主要桌面环境
.sp
个发行版本的最大不同之一是采用的桌面环境配置不同，桌面环境的外观和操作方式不同。此外，每个桌面环境都有自己的模拟终端，您可以在其中运行Linux命令来执行操作系统的操作和管理。
.sp
以下是主要发行版中采用的桌面环境的示例（括号内是桌面环境）。
[图片]
[图片]
[图片]
[图片]
.TS
center;
|l|l|l|l|.
_
T{
桌面环境
T}	T{
模拟终端
T}	T{
可使用的Linux发行版
T}	T{
特征
T}
_
T{
GNOME
T}	T{
gnome\-terminal
T}	T{
大多数发行版，如CentOS和Ubuntu
T}	T{
开发商：GNOME项目
1. GNOME最新版本为GNOME3
2. 在GNOME3中，将GNOME2中提供的GNOME Panel替换为GNOME\-shell作为用户的图形界面，在操作性和设计上发生了很大的变化
3. GNOME\-Shell被设计成适用于鼠标和键盘操作的大型的桌面PC，和使用键盘、鼠标、触控板外接屏幕操作的小型移动PC
4. GNOME3可以在登录时选择GNOME会话
T}
_
T{
KDE
T}	T{
Konsole
T}	T{
openSUSE、Ubuntu、CentOS等
T}	T{
开发商：KDE项目
1. 正式名称为K Desktop Environment
2. 使用QT工具包开发的桌面环境
3. 和GNOME一样，KDE可以在很多发行版中使用
T}
_
T{
Xfce
T}	T{
xfce4\-terminal
T}	T{
Ubuntu、CentOS等
T}	T{
开发商：Xfce项目
1. 专为需要快速、轻便的桌面环境的用户而设计
T}
_
T{
LXDE
T}	T{
lxterminal
T}	T{
Ubuntu、Debian、Fedora等
T}	T{
开发商：LXDE团队
1. Lightweight X11 Desktop Environment
2. 为配置较低的PC设计的轻型桌面环境
3. 适用于配置较低老旧PC和轻薄笔记本，使用GTK工具包开发的桌面环境
T}
_
T{
LXQt
T}	T{
qterminal
T}	T{
openSUSE、Fedora等
T}	T{
开发商：LXQt团队
1. 与LXDE有相似的设计目标，使用QT工具包开发的桌面环境
T}
_
T{
Cinnamon
T}	T{
gnome\-terminal
T}	T{
Mint、CentOS、Ubuntu等
T}	T{
开发商：Linux Mint团队
1. 从GNOME3的GNOME\-Shell衍生出的桌面环境
2. 虽然是专为Linux Mint开发的桌面环境，但是现在可以在多个Linux发行版中使用
3. 外观与操作性与GNOME2相似
T}
_
T{
MATE
T}	T{
mate\-terminal
T}	T{
CentOS、Ubuntu等
T}	T{
开发商：MATE团队
1. MATE是继承GNOME2的桌面环境
2. 虽然GNOME项目停止了对GNOME2的开发，但MATE继续支持GNOME2开发
3. 名字来源与南美的马特茶
T}
_
T{
Pantheon
T}	T{
pantheon\-terminal
T}	T{
elementary OS
T}	T{
开发商：elementary公司
1. elementary OS的桌面环境
2. 具有设计美观和操作简洁的特征
3. 基于GNOME软件组件构建而成
T}
_
.TE
.SS GUI和CUI操作
.sp
操作系统的操作方法分为两种：GUI操作与CUI操作。
.INDENT 0.0
.IP \(bu 2
GUI(Graphical User Interface)
.sp
使用鼠标在图形界面桌面上操作菜单或图标。
.IP \(bu 2
CUI(Character User Interface)
.sp
仅在显示器上显示文件，并通过键盘的输入进行操作。
.UNINDENT
.sp
在桌面环境中提供了不同的GUI工具，您可以通过鼠标来操作这些工具。作为CUI，每个桌面环境都提供了自己的模拟终端。您可以在这个模拟终端中使用键盘输入并执行Linux命令。大多数情况下，GUI工具无法完成细微的操作也可以使用命令来完成。
.sp
不同的桌面环境有不同的GUI工具，但是指令在几乎所有的发行版中都是相同的（有时也会因为命令所采用的版本不同有细微的差异）。
.sp
下面是使用桌面环境GNOME工具中（GUI）进行的操作的示例，以及在模拟终端中gnome\-terminal中（GCI）执行等效操作的示例。
[图片]
[图片]
[图片]
[图片]
[图片]
[图片]
.sp
对于服务器（如DNS、Web或邮件），通常不需要安装桌面环境，或者安装了桌面环境也不使用。原因是当您通过网络管理设备时，您的桌面环境必定会增加网络传输的流量，而且也会消耗一定的性能。所以使用GCI来管理操作系统可以省去繁琐的操作流程与节省流量。
[图片]
[图片]
.SS 1.2 安装 CentOS
.SS 获取安装介质
.sp
要安装CentOS，请从官方网站上的列出的镜像网站链接处下载ISO镜像文件。CentOS官方网站的URL请参照以下内容：
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
\fBCentOS官方网站\fP：\fI\%https://centos.org\fP
.UNINDENT
.UNINDENT
[图片]
.sp
在官方网站上单击“Get CentOS Now”按钮。
[图片]
.sp
CentOS根据不同的使用目的，提供不同的镜像下载。另外不同镜像初期安装的程序包也不相同。您可以在安装完成后添加或删除程序包，确保使用不同的镜像也同样可以构建相同的环境。
.TS
center;
|l|l|l|.
_
T{
种类
T}	T{
使用目的
T}	T{
补充
T}
_
T{
CentOS Linux DVD ISO
T}	T{
标准配置安装
T}	T{
标准安装镜像中用户可根据用途构建各种类型的配置
T}
_
T{
CentOS Stream DVD ISO
T}	T{
滚动更新配置安装
T}	T{
CentOS Stream是一个滚动发行的发行版，它跟踪Red Hat Enterprise Linux（RHEL）开发之前的情况，它位于Fedora Linux和RHEL之间的中间位置
T}
_
.TE
.sp
在本书中，您将使用“CentOS Linux DVD ISO”，点击“CentOS Linux DVD ISO”按钮，就会显示同步了CentOS存储库的镜像站的URL列表页面。下面我们开始对“CentOS\-8\-x86_64\-1905\-dvd1.iso”的安装步骤进行演示。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
ISO镜像版本会随时更新（本书使用的是1905）。安装及应用 CentOS\-8（1905）须要最少2GB内存。我们推荐采用至少4GB内存。其他硬件条件要求，请参考以下URL:
\fI\%https://wiki.centos.org/zh/Manuals/ReleaseNotes\fP
.UNINDENT
.UNINDENT
.SS 安装顺序
.sp
本书采用系统安装程序提供的默认安装方式，之后在每个章节都会提出需要附加的软件包与设置。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
需要使用VMware Workstations或Virtual Box在虚拟环境中安装CentOS时，请参照本书第十一章。
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 1. 3
安装设备并启动
.INDENT 3.0
.INDENT 3.5
从下载的ISO镜像中启动安装程序。启动后，选择“Test this media & install CentOS 8”。
[图片]
.TS
center;
|l|l|.
_
T{
选项
T}	T{
概要
T}
_
T{
Install CentOS 8
T}	T{
安装程序在不检查介质的情况下启动。该选择可缩短启动时间。
T}
_
T{
Test this media & install CentOS 8
T}	T{
默认选择。在安装启动时对媒体进行检查，使用[Esc]键可以结束检查。
T}
_
T{
Troubleshooting
T}	T{
故障恢复。在已经安装的磁盘出现了异常的情况下，使用“Rescuea CentOS 8 system”对系统和内存进行检查。
T}
_
.TE
.UNINDENT
.UNINDENT
.IP 2. 3
选择语言
.INDENT 3.0
.INDENT 3.5
选择要在安装过程中显示的语言。在图形界面的左边栏中选中【中文】，图形界面的右边栏中选中【简体中文（中国）】。然后点击【继续】。
[图片]
.UNINDENT
.UNINDENT
.IP 3. 3
安装信息摘要
.INDENT 3.0
.INDENT 3.5
在【安装信息摘要】中可以进行各种设定。从任何内容开始设定都可以。在本书中，在【安装目的地】、【网络和主机名】、【软件的选择】这三个地方进行设定。
[图片]
.UNINDENT
.UNINDENT
.IP 4. 3
安装目的地
.INDENT 3.0
.INDENT 3.5
在【安装信息摘要】界面中选择【安装目的地】。此处对安装目标的磁盘和文件系统进行确认与配置。
.sp
在【设备选择】中，确认安装的装置中已经完成了检查。另外，在其他的存储选项的【存储配置】中，确认选择了【自动】，点击界面左上方【完成】。
[图片]
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
关于分区的详细内容，请参考第七章。
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP 5. 3
网络和主机名
.INDENT 3.0
.INDENT 3.5
在【安装信息摘要】界面中，选择【网络和主机名】。系统安装完成后也可以变更，在这里通过DHCP实现网络的有效化和设置主机名。
.sp
在本书中，主机名为 \fB“centos.localdomain”\fP 。另外，将以太网设为【打开】。设置结束后，单击界面左上角的【完成】。
[图片]
.UNINDENT
.UNINDENT
.IP 6. 3
软件选择
.INDENT 3.0
.INDENT 3.5
在【安装信息摘要】界面中，选择【软件选择】。默认情况下是【带GUI的服务器】，因此启动时为GUI界面。在本书中，后续的演示是在GUI环境中进行操作。
.sp
选择【基本环境】中的【带GUI的服务器】，点击界面左上角的【完成】。
[图片]
.UNINDENT
.UNINDENT
.IP 7. 3
开始安装
.INDENT 3.0
.INDENT 3.5
完成设置后，单击【安装信息摘要】界面右下角的【开始安装】。
[图片]
.UNINDENT
.UNINDENT
.IP 8. 3
配置root密码与创建普通用户
.INDENT 3.0
.INDENT 3.5
在系统安装期间，设置root密码和普通用户的注册（可选）。
[图片]
.INDENT 0.0
.IP \(bu 2
配置root密码
.INDENT 3.0
.INDENT 3.5
在安装界面中选择【root密码】并进入设定界面，之后请输入两次相同的密码。虽然密码没有限制，但是您可以确认输入的密码的强度。输入结束后，单击屏幕左上角的【完成】。在【脆弱（红色）】的情况下，您需要点击两次【完成】。在本书中，root的密码是 \fB“Linuxbasic2019”\fP。
[图片]
.UNINDENT
.UNINDENT
.IP \(bu 2
配置普通用户
.INDENT 3.0
.INDENT 3.5
在安装界面中选择【创建用户】并进入配置界面。
.sp
在本书中，使用用户名 \fB“centos”\fP，密码 \fB“CentOS@2019”\fP 创建普通用户。配置完成后，点击屏幕左上角的【完成】。
[图片]
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP 9. 3
安装结束后的配置
.INDENT 3.0
.INDENT 3.5
安装完成后，界面右下角将出现【重启】按钮，单击后系统将重新启动。
[图片]
.INDENT 0.0
.IP \(bu 2
安装后许可证验证
.INDENT 3.0
.INDENT 3.5
重新启动后需要确认许可，单击【License information】。
[图片]
.sp
在界面中的【我同意许可协议】前进行勾选，点击界面左上角的【完成】。
[图片]
.UNINDENT
.UNINDENT
.UNINDENT
.sp
这样配置就完成了。单击【初始设置】界面右下角的【结束配置】。
[图片]
.UNINDENT
.UNINDENT
.UNINDENT
.SS 登陆
.sp
为了进行系统信息的确认和变更，使用root用户登录。
[图片]
.sp
使用root用户登录，请在登录界面中点击【未列出】，然后输入用户名和密码。在本书中，root密码输入 \fB“Linuxbasic2019”\fP 。输入后，单击【登录】。
[图片]
[图片]
.INDENT 0.0
.IP \(bu 2
用户名：root
.IP \(bu 2
密码：Linuxbasic2019
.UNINDENT
.sp
登录后会显示初始设定界面。此时请进行汉语输入法的选择等初始设定。
[图片]
[图片]
[图片]
[图片]
[图片]
.sp
出现【Getting Started】界面时，单击屏幕右上角的【否】关闭屏幕。如果显示桌面，则安装完成。
[图片]
[图片]
.SS 1.3 安装 Ubuntu
.SS 获取安装介质
.sp
如果你需要安装Ubuntu，请从官方网站上的列出的镜像网站链接处下载ISO镜像文件。Ubuntu官方网站的URL请参照以下内容：
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
Ubuntu 的官方网站：\fI\%https://www.ubuntu.com\fP
.UNINDENT
.UNINDENT
[图片]
.sp
Ubuntu的安装与CentOS等RedHat系Linux发行版的安装不同，它是通过复制被压缩的专用读取文件系统SquashFS文件的内容来进行安装的。因此，不需要在安装中选择部署目标，只要从官方网站的【Download】菜单中寻找ISO镜像种类的连接，根据部署目标（也有服务器版本的）选择进行下载。
.TS
center;
|l|l|l|.
_
T{
种类
T}	T{
部署目标
T}	T{
补充
T}
_
T{
台式机
T}	T{
使用标准配置安装
T}	T{
面向一般用户，通过GUI安装；安装GNOME做桌面环境
T}
_
T{
服务器
T}	T{
使用最小配置安装
T}	T{
面向服务器用途，通过CUI安装；在安装过程中选择服务器所需软件
T}
_
.TE
.sp
在本书中，使用“桌面”（Ubuntu Desktop）。下面详细说明使用“ubuntu\-18.04\-desktop\-amd64.iso”的安装过程。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
目前 Ubuntu 的版本每六个月更新一次（本书使用的是“18.04”）。另外，要使用“Ubuntu\-18.04\-desktop”，最低配置需要2GB的内存。其他硬件条件请参考下方URL：
\fI\%https://www.ubuntu.com/download/desktop\fP
.UNINDENT
.UNINDENT
.SS 安装顺序
.sp
本书采用系统安装程序提供的默认安装，在每个章节都会提出需要附加的软件包和设置。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
需要使用VMware Workstations或Virtual Box在虚拟环境中安装Ubuntu时，请参照本书第十一章。
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP 1. 3
启动安装程序
.INDENT 3.0
.INDENT 3.5
从下载的ISO镜像文件中启动安装程序。首先，选择要在安装程序中显示的语言。现在，在安装界面左侧栏中选择【中文（简体）】。
.sp
当显示内容为简体中文时，单击【安装Ubuntu】。
[图片]
.UNINDENT
.UNINDENT
.IP 2. 3
选择键盘布局
.INDENT 3.0
.INDENT 3.5
在键盘布局的界面中，选择当前输入使用的键盘类型。这里选择【中文】。
[图片]
.UNINDENT
.UNINDENT
.IP 3. 3
选择要安装的程序
.INDENT 3.0
.INDENT 3.5
在【更新和其他软件】的界面中，选择【正常安装】。【正常安装】中包含办公程序包组和其他方便使用的软件。
[图片]
.UNINDENT
.UNINDENT
.IP 4. 3
选择安装类型
.INDENT 3.0
.INDENT 3.5
在【安装类型】界面中，选择【清除整个磁盘并安装Ubuntu】，然后单击界面右下角的【安装】。
.sp
此选择将会自动配置分区。
[图片]
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
分区的详细内容，请参照第七章。
.UNINDENT
.UNINDENT
.sp
当显示“要在磁盘上更改写入吗？”的确认界面时，单击【继续】。
[图片]
.UNINDENT
.UNINDENT
.IP 5. 3
确认时区
.INDENT 3.0
.INDENT 3.5
如果界面显示“你在什么地方？”，输入地区，单击【继续】。在这里选择地区为【Shanghai】。
[图片]
.UNINDENT
.UNINDENT
.IP 6. 3
设置普通用户
.INDENT 3.0
.INDENT 3.5
在Ubuntu中root用户是禁止登录的，所以我们创建一个普通用户来进行登录。
.sp
在本书中，普通用户的用户名设置为“ubuntu”，有关普通用户设置的详细信息，请参考下方的表格。输入后，点击【继续】。
[图片]
.TS
center;
|l|l|.
_
T{
设置
T}	T{
内容
T}
_
T{
你的名字
T}	T{
ubuntu
T}
_
T{
主机名称
T}	T{
ubuntu.localdomain
T}
_
T{
输入用户名
T}	T{
ubuntu
T}
_
T{
输入密码
T}	T{
Linuxbasic2019
T}
_
T{
确认密码
T}	T{
Linuxbasic2019
T}
_
.TE
.UNINDENT
.UNINDENT
.IP 7. 3
安装完成
.INDENT 3.0
.INDENT 3.5
当显示【完成安装】是，界面右下角会显示【现在重启】。单击【现在重启】，重新启动系统。
[图片]
.UNINDENT
.UNINDENT
.UNINDENT
.SS 登陆
.sp
登录到您创建的普通用户“ubuntu”，以便查看和更新系统信息。
.sp
要使用普通用户“Ubuntu”登录，选择“ubuntu”，然后输入密码。在本书中，“ubuntu”用户的密码为“Linuxbasic2019”。输入后，单击【登录】。
[图片]
.INDENT 0.0
.IP \(bu 2
用户名：ubuntu
.IP \(bu 2
密码：Linuxbasic2019
.UNINDENT
.sp
登陆后会显示初始设定画面。在本书中，不进行特殊的设定，请点击【下一步】或【完成】进入桌面。
[图片]
[图片]
[图片]
[图片]
.sp
显示【软件更新器】的界面。如果想要立即进行更新，请选择【立即安装】。在本书中，选择【稍后提醒】。
[图片]
.sp
出现桌面界面时，Ubuntu已经完成安装。
[图片]
.SS 1.4 系统的初始化设定
.SS CentOS的初始化配置
.sp
如果您希望在基础安装的CentOS上更好的工作，需要进行如下的操作。
.INDENT 0.0
.IP \(bu 2
查看已安装包信息
.IP \(bu 2
进行更新
.IP \(bu 2
确认SELinux的状态并关闭
.IP \(bu 2
确认防火墙的状态并关闭
.UNINDENT
.sp
另外，后面的操作都是在命令行中进行说明，请启动虚拟终端。
.sp
从CentOS上方导航栏左侧点击活动，进入启动器界面，在左侧启动栏中找到终端图标，然后单击启动虚拟终端。
[图片]
.INDENT 0.0
.IP \(bu 2
查看已安装包信息
.INDENT 2.0
.INDENT 3.5
在安装CentOS时，本书选择“带GUI的服务器”作为选择软件。这是根据使用目的功能组合的包组之一。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
有关包的详细信息，请参考第六章。
.UNINDENT
.UNINDENT
.sp
如果要显示包组的列表，执行\(gadnf groups list\(ga即可。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# dnf group list
上次元数据过期检查：0:53:31 前，执行于 2019年11月17日 星期日 00时22分49秒。
可用环境组：
服务器
最小安装
工作站
虚拟化主机
定制操作系统
已安装的环境组：
带 GUI 的服务器
已安装组：
容器管理
无头系统管理
可用组：
\&.NET 核心开发
RPM 开发工具
智能卡支持
开发工具
图形管理工具
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要查看每个包组中包含哪些软件包，请在命令\(gadnf group info\(ga命令中指定包组的名称。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# dnf groups info "带 GUI 的服务器"
上次元数据过期检查：0:55:58 前，执行于 2019年11月17日 星期日 00时22分49秒。
环境组：带 GUI 的服务器
描述：集成的易于管理的带有图形界面的服务器
no group \(aqdns\-server\(aq from environment \(aqgraphical\-server\-environment\(aq
必选软件包组：
Common NetworkManager submodules
Container Management
Core
Fonts
GNOME
Guest Desktop Agents
Hardware Monitoring Utilities
Hardware Support
\&...省略...
可选软件包组：
Basic Web Server
Debugging Tools
FTP Server
File and Storage Server
Guest Agents
Infiniband Support
Mail Server
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
进行更新
.INDENT 2.0
.INDENT 3.5
CentOS经常进行软件包的故障分析和功能改进，这些更新的软件包都是通过存储库提供的。通过存储库更新软件包可以使用\(gadnf update\(ga命令。命令执行后将会注册存储库信息与当前已安装的软件包进行比较并校验差异，然后下载并安装需要更新的软件包。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
有关存储库的更多信息，请参考第六章。
.UNINDENT
.UNINDENT
.sp
\fIdnf update\fP 运行后会出现是否安装的确认信息，如果确认安装请输入\(gaY\(ga或\(gay\(ga。当所需更新的安装包安装完成后，将会显示“已完成”的信息。这样更新就结束了。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# dnf update
上次元数据过期检查：1:05:12 前，执行于 2019年11月17日 星期日 00时22分49秒。
依赖关系解决。
====================================================================================================
软件包                          架构   版本                                        仓库       大小
====================================================================================================
Installing:
kernel                          x86_64 4.18.0\-80.11.2.el8_0                        BaseOS    424 k
kernel\-core                     x86_64 4.18.0\-80.11.2.el8_0                        BaseOS     24 M
kernel\-modules                  x86_64 4.18.0\-80.11.2.el8_0                        BaseOS     20 M
Upgrading:
\&...省略...
完毕！
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
确认SELinux的状态并关闭
.INDENT 2.0
.INDENT 3.5
SELinux是具有对安全管理者以外的用户不能变更的强制的访问控制方式和对每个进程的文件等资源的访问进行限制的Type Enforcement，以及限制包括root在内的所有用户的角色的卷库访问控制和功能。
.sp
应为可以加强系统的安全性，所以在互联网中的服务器运用方面有好处，但是在可以信赖的内部网络环境中的使用、以及作为开发环境和测试环境使用时，也有关闭的情况。在这里，将介绍关闭SELinux的一种方法。
.sp
SELinux具有以下三种状态：
.TS
center;
|l|l|.
_
T{
SELinux状态
T}	T{
说明
T}
_
T{
enforcing
T}	T{
生效状态
T}
_
T{
permissive
T}	T{
无效状态，但SELinux日志处于记录状态
T}
_
T{
disabled
T}	T{
无效状
T}
_
.TE
.sp
要检查SELinux当前的状态，请执行\(gagenenforce\(ga命令。要确认更详细的信息，请执行\(gasestatus\(ga命令。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# getenforce ←查看SELinux当前状态
Enforcing    ←SELinux生效
# sestatus   ←查看SELinux更详细的内容
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   enforcing
Mode from config file:          enforcing
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Memory protection checking:     actual (secure)
Max kernel policy version:      31
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要禁用SELinux，请执行以下的操作：
.INDENT 0.0
.IP \(bu 2
临时禁用
.INDENT 2.0
.INDENT 3.5
如果需要临时（在系统重启前生效）禁用SELinux，在\(gasetenforce\(ga命令后追加\(ga0\(ga。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# getenforce ←查看SELinux当前状态
Enforcing    ←SELinux生效
# setenforce 0  ←关闭SELinux
# getenforce    ←查看SELinux当前状态
Permissive   ←SELinux关闭
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
永久禁用
.INDENT 2.0
.INDENT 3.5
如果需要永久禁用SELinux，在\(ga/etc/selinux/config\(ga文件中的以“SELINUX”开头的所在行中将“enforcing”修改为“permissive”或“disabled”并重启系统。在下面的示例中，您已经将配置文件中“permissive”修改为“disabled”。更改后，通过\(gareboot\(ga命令重启系统。
.sp
请注意，在这个示例中，通过vi编辑器来编辑文件。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
有关vi命令的内容，请参考第三章。
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# vi /etc/selinux/config
\&...以下为vi编辑器显示内容...
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing \- SELinux security policy is enforced.
#     permissive \- SELinux prints warnings instead of enforcing.
#     disabled \- No SELinux policy is loaded.
#SELINUX=enforcing ←注释此行，在行首添加#号
SELINUX=disabled   ←添加此行
# SELINUXTYPE= can take one of these three values:
#     targeted \- Targeted processes are protected,
#     minimum \- Modification of targeted policy. Only selected processes are protected.
#     mls \- Multi Level Security protection.
SELINUXTYPE=targeted
\&...编辑结束...
# reboot
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
确认防火墙状态并关闭
.INDENT 2.0
.INDENT 3.5
防火墙是组织来自网络的未经授权的访问机制。在导入时，只允许访问特定的端口号。
.sp
互联网上的服务器操作等是必须的功能，但与SELinux一样，在作为可靠的内部网络的使用、开发环境和测试环境中使用时，您可能需要禁用该选项。本节介绍如何禁用防火墙。
.sp
Linux的防火墙功能是由内核模块Netfilter提供的。从CentOS6到CentOS7为止的设定使用程序是iptables。CentOS8中则使用的是nftables。nftables是新的数据包分类框架，新的linux防火墙管理程序，旨在替代现存的 {ip,ip6,arp,eb}_tables。它拥有一些高级的类似编程语言的能力，例如定义变量和包含外部文件，即拥有使用额外脚本的能力。CentOS8同样可以使用firewalld管理防火墙。
.sp
> firewalld 提供了多个不同的安全强度设置模板，称为“区域”，通过选择符合您要连接的网络的可靠性的区域，可以方便的设置。有关firewalld更多的信息，请参考第十章。
.sp
现在的防火墙的状态，使用firewalld命令确认。默认情况下，只允许cockpit、ssh和DHCPv6客户端。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# firewall\-cmd \-\-list\-service \-\-zone=public
cockpit dhcpv6\-client ssh
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
要停止防火墙，请运行systemctl命令。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# systemctl stop firewalld.service
# firewall\-cmd \-\-list\-service \-\-zone=public ←检查防火墙
FirewallD is not running
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
运行上述命令，您可以停止运行防火墙，但在重启系统后，firewalld将自动启动。要避免重启后防火墙自动启动，请执行以下命令：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# systemctl disable firewalld.service
Removed /etc/systemd/system/multi\-user.target.wants/firewalld.service.
Removed /etc/systemd/system/dbus\-org.fedoraproject.FirewallD1.service.
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Ubuntu初始化设定
.sp
在使用Ubuntu的基础上，记载了是要做好的工作。进行操作如下：
.INDENT 0.0
.IP \(bu 2
确认已安装包的信息
.IP \(bu 2
进行更新
.IP \(bu 2
确认AppArmor的运行状态
.IP \(bu 2
检查防火墙的状态
.UNINDENT
.sp
另外，为了在命令行中说明后面的操作，先启动虚拟终端。
.sp
在Ubuntu的桌面上，点击【显示应用程序】图标，滚动表所示的图标一览表，选择【终端】。
[图片]
[图片]
.INDENT 0.0
.IP \(bu 2
确认已安装包的信息
.INDENT 2.0
.INDENT 3.5
要查看系统中已经安装的所有软件包，请使用dpkg命令。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
有关包的详细信息，请参考第六章。
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# dpkg \-l | more
期望状态=未知(u)/安装(i)/删除(r)/清除(p)/保持(h)
| 状态=未安装(n)/已安装(i)/仅存配置(c)/仅解压缩(U)/配置失败(F)/不完全安装(H)/触发器等待(W)/触发器未决(T)
|/ 错误?=(无)/须重装(R) (状态，错误：大写=故障)
||/ 名称                                       版本                                         体系结构     描述
+++\-==========================================\-============================================\-============\-===============================================================================
ii  accountsservice                            0.6.45\-1ubuntu1                              amd64        query and manipulate user account information
ii  acl                                        2.2.52\-3build1                               amd64        Access control list utilities
ii  acpi\-support                               0.142                                        amd64        scripts for handling many ACPI events
ii  acpid                                      1:2.0.28\-1ubuntu1                            amd64        Advanced Configuration and Power Interface event daemon
ii  adduser                                    3.116ubuntu1                                 all          add and remove users and groups
ii  adium\-theme\-ubuntu                         0.3.4\-0ubuntu4                               all          Adium message style for Ubuntu
ii  adwaita\-icon\-theme                         3.28.0\-1ubuntu1                              all          default icon theme of GNOME (small subset)
ii  aisleriot                                  1:3.22.5\-1                                   amd64        GNOME solitaire card game collection
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
进行更新
.INDENT 2.0
.INDENT 3.5
Ubuntu经常进行故障修复和功能改善，它们是通过存储库提供的。首先更新在本地管理的包索引后，更新session。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
关于存储库的更多信息，请参考第六章。
.UNINDENT
.UNINDENT
.sp
运行\(gasudo apt update\(ga命令可以更新本地软件包索引。运行时，将显示可更新的软件包的数量。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt update
[sudo] ubuntu 的密码：
命中:1 http://cn.archive.ubuntu.com/ubuntu bionic InRelease
获取:2 http://security.ubuntu.com/ubuntu bionic\-security InRelease [88.7 kB]
获取:3 http://cn.archive.ubuntu.com/ubuntu bionic\-updates InRelease
\&...省略...
获取:19 http://cn.archive.ubuntu.com/ubuntu bionic\-backports/universe amd64 DEP\-11 Metadata [7,976 B]
已下载 1,950 kB，耗时 14秒 (136 kB/s)
正在读取软件包列表... 完成
正在分析软件包的依赖关系树
正在读取状态信息... 完成
有 209 个软件包可以升级。请执行 ‘apt list \-\-upgradable’ 来查看它们。
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
然后执行\(gasudo apt upgrade\(ga命令进行软件包的升级更新。在安装前会出现“是否安装”的确认提示，确认安装请输入“Y”或“y”。这样更新就结束了。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo apt upgrade
正在读取软件包列表... 完成
正在分析软件包的依赖关系树
正在读取状态信息... 完成
正在计算更新... 完成
下列【新】软件包将被安装：
\&...省略...
升级了 209 个软件包，新安装了 5 个软件包，要卸载 0 个软件包，有 0 个软件包未被升级。
需要下载 225 MB/386 MB 的归档。
解压缩后会消耗 332 MB 的额外空间。
您希望继续执行吗？ [Y/n] y   ←输入【y】
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
确认AppArmor状态
.INDENT 2.0
.INDENT 3.5
在Ubuntu中，AppArmor比SELinux更容易设置，以增强系统的安全性。以程序为单位进行强制访问控制。
.sp
要进行AppArmor的状态确认，运行systemctl命令。从以下的执行结果可知启动中（Active）。本书将保持有效。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ systemctl status apparmor.service
● apparmor.service \- AppArmor initialization
Loaded: loaded (/lib/systemd/system/apparmor.service; enabled; vendor preset: enabled)
Active: active (exited) since Sun 2019\-11\-17 13:34:04 CST; 2h 26min ago
    Docs: man:apparmor(7)
        http://wiki.apparmor.net/
Main PID: 433 (code=exited, status=0/SUCCESS)
    Tasks: 0 (limit: 4646)
CGroup: /system.slice/apparmor.service
\&...忽略...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
确认防火墙状态
.INDENT 2.0
.INDENT 3.5
在Ubuntu中，安装时不包含firewalld，如果要使用，请运行\(gaapt install firewalld\(ga命令进行安装。默认情况下，提供了一个名为“ufw”（Uncomplicate FireWall）的命令。
.sp
要查看防火墙的当前状态，请运行\(gasudo ufw status\(ga命令。在下面的执行结果中，您可以看到它处于非互动状态（已停止）。本文档将保持非活动状态。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo ufw status
状态：不活动
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
有关ufw命令的详细信息，请参考第十章。
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS 1.5 通过 SSH 远程登录
.SS 远程登录
.sp
从本地主机（用户直接登录的主机）登录到网络上的其他主机（远程主机），将其称为远程登录。
[图片]
.sp
远程登录的指令有很多。
.INDENT 0.0
.IP \(bu 2
telnet
.INDENT 2.0
.INDENT 3.5
telnet命令可以在远程主机上运行telnet服务时使用。当您访问远程主机时，就会和登录本地主机时一样发生登录认证。因此输入在远程主机上设定的用户名和密码。另外，由于通信内容是普通文本（明文），所以如果通信线路被窃听的话，就可以很容易地明确账号和密码。
.UNINDENT
.UNINDENT
.IP \(bu 2
ssh
.INDENT 2.0
.INDENT 3.5
ssh命令和telnet命令一样，是可以登录到远程主机的命令，访问远程主机时，登录验证将与登录到本地主机时一样。但是，与telnet不同，使用公钥密码对所有包含密码的通信内容进行加密。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
关于公钥密码信息，请参考第十章。
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.sp
ssh命令是免费安装的OpenSSH客户端命令，服务器是sshd。OpenSSH由OpenBSD项目开发。
.SS 确认sshd启动
.sp
本书介绍ssh进行远程登录。另外，在登录目标的主机（服务器）中，由于以sshd启动为前提，所以确认CentOS以及Ubuntu中的sshd的启动不存在。
.INDENT 0.0
.IP \(bu 2
CentOS的sshd
.INDENT 2.0
.INDENT 3.5
在CentOS中，sshd已经安装完毕，并且开机自动启动，因此没有服务器端设置。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# systemctl status sshd
● sshd.service \- OpenSSH server daemon
Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)
Active: active (running) since Sun 2019\-11\-17 00:15:00 EST; 3h 11min ago
    Docs: man:sshd(8)
        man:sshd_config(5)
Main PID: 1126 (sshd)
    Tasks: 1 (limit: 23619)
Memory: 4.6M
CGroup: /system.slice/sshd.service
        └─1126 /usr/sbin/sshd \-D \-oCiphers=aes256\-gcm@openssh.com,chacha20\-poly1305@openssh.com,aes256\-ctr>
\&...忽略...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
另外，sshd在初始设定中使用22号端口。远程登录时，除了远程主机名之外，还提供了访问此端口号所需的信息。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# netstat \-tlnp
Active Internet connections (only servers)
Proto Recv\-Q Send\-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 192.168.122.1:53        0.0.0.0:*               LISTEN      2568/dnsmasq
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1126/sshd
tcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      8018/cupsd
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      1/systemd
tcp6       0      0 :::22                   :::*                    LISTEN      1126/sshd
tcp6       0      0 ::1:631                 :::*                    LISTEN      8018/cupsd
tcp6       0      0 :::111                  :::*                    LISTEN      1/systemd
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
Uubuntu的sshd
.INDENT 2.0
.INDENT 3.5
由于在Ubuntu中没有安装sshd，所以运行以下命令进行安装。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
sshd被提供为openssh\-server程序包。有关软件包的更多信息，请参考第六章内容。
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ dpkg \-l | grep openssh\-server
$                                   ←确认OpenSSH未安装
$ sudo apt install openssh\-server   ←安装
[sudo] ubuntu 的密码：
正在读取软件包列表... 完成
正在分析软件包的依赖关系树
正在读取状态信息... 完成
\&...省略...
您希望继续执行吗？ [Y/n] y   ←输入【y】
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
安装完成后，请检查sshd的状态。在下面的执行结果中，您可以看到它是启动（Active）的。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ sudo systemctl status sshd
● ssh.service \- OpenBSD Secure Shell server
Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
Active: active (running) since Sun 2019\-11\-17 15:40:49 CST; 56min ago
Main PID: 4814 (sshd)
    Tasks: 1 (limit: 4646)
CGroup: /system.slice/ssh.service
        └─4814 /usr/sbin/sshd \-D
\&...忽略...
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS ssh远程登录
.sp
那么，从本地主机（客户端）进行远程登录。由于CentOS和Ubuntu的方法都是相同的。所以在此记载CentOS的运行结果。
.INDENT 0.0
.IP \(bu 2
ssh命令示例
.INDENT 2.0
.INDENT 3.5
如果本地主机（客户端）是Linux，请使用ssh命令。例如，在以下前提下执行：
.INDENT 0.0
.IP \(bu 2
客户端的主机名为“centos\-1.localdomain”，服务器的主机名为“centos\-2.localdomain”
.IP \(bu 2
客户端的IP地址为“10.0.2.16”，服务器的IP地址为“10.0.2.15”
.IP \(bu 2
客户端主机以“centos”的身份登录
.IP \(bu 2
作为“centos”远程登录到服务器主机
.UNINDENT
[图片]
.sp
首先，请先看示例一。ssh命令后，指定主机名。由于省略了用户名，因此使用客户端的当前用户名（在此为“centos”）。此外，首次连接到主机时，OpenSSH将显示一条警告信息，如果出现警告，请输入“yes”。
.sp
如上述示例所示，登录成功，操作结束后注销登录。要注销，请运行\(gaexit\(ga命令。
.sp
接下来，请看示例二。也可以指定IP地址而不是主机名。另外，登录时指定用户名时，指定为“\-l 用户名”。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[centos@centos\-2 ~]$ ssh \-l centos 10.0.2.15
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
> 示例中的centos@centos\-2提示意味着用户centos已经登录到主机centos\-2。此外，“#”表示当前用户为root，“$”是以普通用户身份登录的，相关内容请参考第三章。
.UNINDENT
.UNINDENT
.IP \(bu 2
从Windows远程登录到Linux主机
.INDENT 2.0
.INDENT 3.5
由于Microsoft Windows中（根据使用的版本不同）不包含SSH客户端，所以提供了几个用于Windows的SSH客户端，包括免费、商用。如果导入这些的话，可以通过SSH从Windows远程操作Linux主机。在本书中，将对Windows中使用的SSH客户端之一的PuTTY的使用方法进行说明。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
PuTTY是一款集成虚拟终端、系统控制台和网络文件传输为一体的自由及开放源代码的程序。它支持多种网络协议，包括SCP，SSH，Telnet，rlogin和原始的套接字连接。它也可以连接到串行端口。其软件名字“PuTTY”没有特殊含义。更详细的内容请参考下方的URL：
\fI\%https://www.putty.org/\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
启动PuTTY
.INDENT 2.0
.INDENT 3.5
双击桌面“PuTTY”快捷方式，当桌面没有快捷方式时，请从开始菜单启动。
[图片]
.UNINDENT
.UNINDENT
.IP \(bu 2
指定目标
.INDENT 2.0
.INDENT 3.5
运行 PuTTY 就可以看到如下界面：
[图片]
.sp
在“Host Name(or IP Address)” 框内输入服务器的 IP 或主机名，选择SSH协议，SSH 协议默认端口为22，如果你修改了 SSH 协议的端口号，记得修改此处端口号。如果希望把这次的输入保存起来，方便以后再次登录，可以在“Saved Sessions”框内输入会话保存的名称，比如“Web Server”，之后点击保存即可。
[图片]
.sp
最后点下面的 “Open” 按钮，输入正确的用户名和口令，就可以登录服务器了。首次登录一台主机时会看到这个安全告警的对话框：
[图片]
.sp
这是要告诉你登录的主机密钥指纹，点“是”就保存起来，以后就不会再弹出这个窗口，然后就正常登录。点击“否”不保存，下次登录还会弹出这个对话框，但是也可以正常登录。点击“取消”则取消此次登录。
[图片]
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SH 第二章 LINUX的启动和停止
.SS 2.1 了解引导顺序
.SS 引导顺序简介
.sp
启动系统的运行过程称为引导（Boot）。
.sp
而引导顺序是指，从接通电源到显示登录画面或登录命令界面为止，内核的初期设定、文件系统的安装、系统的各种管理程序（守护进程）的启动、网络的配置等。它是OS运行所需的所有设定的一系列流程。
.sp
因此，理解引导顺序也可以更深入的理解OS，而且在系统发生故障时对特定原因进行处理也是非常有帮助的。
[图片]
.SS BIOS/UEFI
.sp
PC接入电源后，BIOS或UEFI读取Linux的GRUB2引导加载器并启动。
.sp
这几年几乎所有PC都采用了UEFI，BOIS和UEFI在GRUB2启动后的处理记录是不相同的。
.INDENT 0.0
.IP \(bu 2
BIOS
.INDENT 2.0
.INDENT 3.5
BIOS(Basic Input/Output System)是编入并存储在PC硬件的非易失性存储器（NVRAM：Non\-Volatile RAM）中的程序（固件）。打开PC的电源后，BIOS按照设定的设备的先后顺序，检索位于磁盘扇区最前端的MBR（Master Boot Record）中的引导加载器，并启动第一个检索到的程序。
.UNINDENT
.UNINDENT
.IP \(bu 2
UEFI
.INDENT 2.0
.INDENT 3.5
EFI(Extensible Fiemware Interface)是BIOS的标准固件，但其扩展了功能，包括支持高容量磁盘（GPT: GUID Partition Table）、强化安全性（Secure Boot）、通过网络进行远程诊断等。它由Intel公司开发，现在被Unified EFI Forum管理。名称也变更为UEFI(Unified Extensible Fiemware Interface)，但UEFI和EFI可以理解为具有相同含义的词汇。
.sp
从UEFI引导OS时，按照设定再NVRAM中先后顺序，启动存储在磁盘中的EFI分区（EFI System Partition）中的引导加载程序。这一点与启动MBR内的引导加载程序的BIOS的方式不同。
.UNINDENT
.UNINDENT
.IP \(bu 2
Secure Boot
.INDENT 2.0
.INDENT 3.5
Secure Boot（安全引导）是通过编入UEFI的公钥，验证引导器中的数字证书来防止使用未经授权的程序（引导加载程序）启动的供应商的硬件。如果要使用安全引导，请在UEFI设置界面中启用安全引导设置。
.sp
因为Linux的引导加载器GURB2中嵌入了数字证书，所以它与安全引导具有相同功能。如果只是在正常情况下使用Linux，在UEFI设定界面中关闭Secure Boot也是完全没有问题的。
.UNINDENT
.UNINDENT
.UNINDENT
.sp
BIOS中启动器的先后顺序，或是UEFI中引导加载器的先后顺序，都可以在接入电源后通过BIOS或UEFI的设定界面中进行设定。
.sp
大多数型号的PC都可以在开机后按功能键F2进入设定界面。
.SS 引导加载程序
.sp
引导加载器可以将内核(vmlinux)和initramfs从磁盘加载到内存中，并调用其进行系统启动。
.sp
在近年来几乎在所有Linux发行版中，都采用GURB2作为引导加载器。GRUB2在UEFI和BIOS中都可以使用。
.sp
如上方启动界面中下方的信息所提示的那样，通过输入[e](Edit)键，可以编辑在内存中的grub.cfg文件，通过输入[c](command)键可以执行GRUB命令。
[图片]
.sp
在下方示例中，展示了在BIOS环境中编辑CentOS内存中的grub.cfg文件，在没有桌面环境(multi\-user目标)中启动（在EFI环境中行首命令“linux”为“linuxefi”）。
[图片]
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
在以linux开头的行的行尾添加数字“3”，指定以multi\-user目标启动（配置完成后按下[Ctrl]+[x]组合键）。
.UNINDENT
.UNINDENT
.sp
在下方示例中，展示了在BIOS环境中编辑Ubuntu内存中的grub.cfg文件，在无桌面环境(multi\-user目标)中启动。
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
在以linux开头的行的行尾添加数字“3”，指定以multi\-user目标启动（配置完成后按下[Ctrl]+[x]组合键）。
.UNINDENT
.UNINDENT
.sp
你可以在桌面环境中启动，或者在不使用桌面环境(multi\-user目标)中启动，或者设置systemd的默认目标。综上所述，如果在GRUB2配置文件中指定，则可以修改先后顺序。
.SS BIOS启动
.sp
GRUB2中包含了boot.img文件和core.img文件以及动态加载文件的多个模型。
.sp
GRUB2安装时boot.img被写入磁盘MBR扇区首部512字节中。同时，生成包含GRUB2的基础代码和/boot目录的文件系统模块（例如：xfs.mod）等的core.img，core.img写入MBR之后的扇区。
.sp
从BIOS中读取的boot.img导入core.img，core.img将放置于/boot/grub2/目录以下的模块(xx.mod)作为文件系统的文件进行读取，随后进行加载/链接。
.SS EFI启动
.sp
GRUB2加载用FAT32或vfat格式化的EFI分区中EFI/centos/目录下的shim.efi文件和grubx64.efi文件。
.sp
这两个文件不是运行Linux的ELF，而是作为Microsoft Windows可执行文件的Portable Excutable（PE）。
.INDENT 0.0
.IP \(bu 2
shim.efi
.INDENT 2.0
.INDENT 3.5
EFI是参照引导入口调用的第一阶段的引导加载器。其安装了由Microsoft UEFI Signing Server签名的数字证书，支持安全引导功能。
.sp
grubx64.efi文件调用第二阶段的引导加载程序。
.UNINDENT
.UNINDENT
.IP \(bu 2
grubx64.efi
.INDENT 2.0
.INDENT 3.5
它是从第一阶段引导加载器shim.efi到调用的第二阶段的引导加载器。其加载grub.cfg文件并显示GRUB2引导界面。
.sp
根据grub.cfg配置将内核和initramfs加载到内存中，然后启动内核。如果要在不开启安全引导的情况下启动，您也可以直接从UEFI中调用grubx64.efi。
.UNINDENT
.UNINDENT
.UNINDENT
.SS 配置文件和目录
.sp
GRUB2的主要目录和配置文件如下所示：
CentOS和Ubuntu的/boot目录下的GRUB2目录有所不同。
.INDENT 0.0
.IP \(bu 2
CentOS: /boot/grub2
.IP \(bu 2
Ubuntu: /boot/grub
.UNINDENT
.sp
下表介绍了CentOS的示例：\fB/boot/grub2\fP
.TS
center;
|l|l|l|l|.
_
T{
目录和配置文件
T}	T{
BIOS
T}	T{
UEFI
T}	T{
说明
T}
_
T{
/boot/grub2/
T}	T{
○
T}	T{
○
T}	T{
配置文件和模块所在的目录
T}
_
T{
/boot/grub2/grub.cfg
T}	T{
○
T}	T{
○
T}	T{
配置文件。grub2\-install生成的/boot/efi/EFI/centos/grubx64.efi也参照此文件
T}
_
T{
/boot/grub2/i386\-pc/
T}	T{
○
T}	T{
—
T}	T{
此目录静态或动态链接到core.img的模块所在的目录。core.img也在此目录生成
T}
_
T{
/usr/lib/grub/i386\-pc/
T}	T{
○
T}	T{
—
T}	T{
模块所在的目录。在执行grub2\-install命令时，在此目录下面的模块将复制到/boot/grub2/i386\-pc/目录下
T}
_
T{
/boot/grub2/x86_64\-efi/
T}	T{
—
T}	T{
○
T}	T{
grubx64.efi中存放静态或动态链接的模块的目录。core.efi再此处生成并复制到/boot/efi/EFI/centos/grubx86.efi中
T}
_
T{
/usr/lib/grub/x86_64\-efi/
T}	T{
—
T}	T{
○
T}	T{
模块所在的目录。在执行grub2\-install时，下面的模块将复制到/boot/grub2/x86_64\-efi/目录下
T}
_
T{
/boot/efi/EFI/centos/
T}	T{
—
T}	T{
○
T}	T{
配置文件和引导加载程序所在的目录
T}
_
T{
/boot/efi/EFI/centos/grub.cfg
T}	T{
—
T}	T{
○
T}	T{
配置文件。从grub2\-efi安装包中安装的/boot/efi/centos/grubx64.efi
T}
_
T{
/etc/grub.d/
T}	T{
○
T}	T{
○
T}	T{
设定了配置文件grub.cfg生成时执行的脚本的数据库。其目录下的shell脚本参照/etc/default/grub文件中的变量进行设定，生成grub.cfg在下面的章节中进行讲解
T}
_
T{
/etc/default/grub
T}	T{
○
T}	T{
○
T}	T{
在生成配置文件grub.cfg时，设定从/etc/grub.d/下的脚本引用的变量的值
T}
_
.TE
.sp
grub.cfg的设定用于GRUB2执行命令的参数。主要的GRUB2命令如下表所示:
.TS
center;
|l|l|l|l|l|.
_
T{
GRUB2命令（CentOS）
T}	T{
GRUB2命令（Ubuntu）
T}	T{
BIOS
T}	T{
UEFI
T}	T{
说明
T}
_
T{
insmod
T}	T{
insmod
T}	T{
○
T}	T{
○
T}	T{
模块的动态加载
T}
_
T{
set
T}	T{
set
T}	T{
○
T}	T{
○
T}	T{
参数的设定
T}
_
T{
linux
T}	T{
linux
T}	T{
○
T}	T{
○
T}	T{
以16位后路模式启动Intel架构的内核。内核随后转换为保护模式
T}
_
T{
initrd
T}	T{
initrd
T}	T{
○
T}	T{
○
T}	T{
在使用linux命令启动内核时，指定内核使用initramfs
T}
_
T{
linuxefi
T}	T{
—
T}	T{
—
T}	T{
○
T}	T{
将UEFI参数传递到内核，启动内核
T}
_
T{
initrdefi
T}	T{
—
T}	T{
—
T}	T{
○
T}	T{
用linuxefi命令启动内核时，指定内核使用initramfs
T}
_
.TE
.sp
下面是以BIOS环境下的CentOS的grub.cfg文件为例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&...省略...
### BEGIN /etc/grub.d/10_linux ###
insmod part_msdos
insmod ext2
set root=\(aqhd0,msdos1\(aq
if [ x$feature_platform_search_hint = xy ]; then
search \-\-no\-floppy \-\-fs\-uuid \-\-set=root \-\-hint\-bios=hd0,msdos1 \-\-hint\-efi=hd0,msdos1 \-\-hint\-baremetal=ahci0,msdos1 \-\-hint=\(aqhd0,msdos1\(aq  39577ee2\-6cb9\-49e7\-914c\-92a0bd7a292d
else
search \-\-no\-floppy \-\-fs\-uuid \-\-set=root 39577ee2\-6cb9\-49e7\-914c\-92a0bd7a292d
fi
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
下面是以UEFI环境下的CentOS的grub.cfg文件为例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&...省略...
### BEGIN /etc/grub.d/10_linux ###
insmod part_gpt
insmod ext2
set root=\(aqhd0,gpt2\(aq
if [ x$feature_platform_search_hint = xy ]; then
search \-\-no\-floppy \-\-fs\-uuid \-\-set=root \-\-hint\-bios=hd0,gpt2 \-\-hint\-efi=hd0,gpt2 \-\-hint\-baremetal=ahci0,gpt2  b66a06d8\-fa55\-4365\-8eeb\-186d8486026c
else
search \-\-no\-floppy \-\-fs\-uuid \-\-set=root b66a06d8\-fa55\-4365\-8eeb\-186d8486026c
fi
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
下面是以UEFI环境下的CentOS的grub.cfg文件为例:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\&...省略...
### BEGIN /etc/grub.d/20_memtest86+ ###
menuentry \(aqMemory test (memtest86+)\(aq {
    insmod part_msdos
    insmod ext2
    set root=\(aqhd0,msdos1\(aq
    if [ x$feature_platform_search_hint = xy ]; then
    search \-\-no\-floppy \-\-fs\-uuid \-\-set=root \-\-hint\-bios=hd0,msdos1 \-\-hint\-efi=hd0,msdos1 \-\-hint\-baremetal=ahci0,msdos1  fcdd3141\-61c0\-4969\-bac5\-26ed9ceb97bc
    else
    search \-\-no\-floppy \-\-fs\-uuid \-\-set=root fcdd3141\-61c0\-4969\-bac5\-26ed9ceb97bc
    fi
    knetbsd /boot/memtest86+.elf
}
\&...省略...
.ft P
.fi
.UNINDENT
.UNINDENT
.SS grub2\-mkconfig/grub\-mkconfig命令
.sp
grub2\-mkconfig是用于生成CentOS配置文件grub.cfg的命令，grub\-mkconfig是用于生成Ubuntu配置文件grub.cfg的命令。
.sp
在没有自定义变量的情况下执行grub2\-mkconfig或grub\-mkconfig时，此命令会将生成配置文件的内容打印在屏幕中（标准输出）。为了保存grub.cfg配置文件，使用“>”右尖括号符号将打印的内容重定向到文件中。
.INDENT 0.0
.IP \(bu 2
CentOS：\fBgrub2\-mkconfig > grub.cfg\fP
.IP \(bu 2
Ubuntu：\fBgrub\-mkconfig > grub.cfg\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# cd /boot/grub2/
# cp grub.cfg grub.cfg.back ←为了慎重起见，先把当前文件做备份
# grub2\-mkconfig > grub.cfg
Generating grub configuration file ...
done
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ cd /boot/grub/
$ sudo cp grub.cfg grub.cfg.back ←为了慎重起见，先把当前文件做备份
$ sudo grub\-mkconfig | sudo tee grub.cfg
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
或者您也可以通过参数“\-o”指定并执行输出到文件。
.INDENT 0.0
.IP \(bu 2
CentOS：\fBgrub2\-mkconfig \-o grub.cfg\fP
.IP \(bu 2
Ubuntu：\fBgrub\-mkconfig \-o grub.cfg\fP
.UNINDENT
.sp
在生成的配置文件grub.cfg中，配置编号从“0”开始，但是请注意，配置文件grub.cfg中的分区编号是从“1”开始，而不是从“0”开始。
.sp
如果因为配置文件grub.cfg丢失而引起Linux系统无法启动的故障的情况下，可以从DVD或CD\-ROM中以读写模式启动并执行grub2\-mkconfig或grub\-mkconfig命令生成配置文件grub.cfg。
.sp
grub2\-mkconfig和grub\-mkconfig命令从/etc/grub.d/目录下的shell脚本获取配置。每个shell脚本引用/etc/default/grub文件以生成配置文件grub.cfg中各部分的内容。
.sp
以下是位于CentOS中/etc/grub.d/目录下的shell脚本。Ubuntu与之相同。
.sp
“10_linux”生成当前内核的启动行和initramfs的相关内容。
.sp
“30_os\-prober”生成在磁盘中查找并安装操作系统的的相关内容。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# ls \-F /etc/grub.d/
00_header*  01_menu_auto_hide*  10_linux*      20_ppc_terminfo*  30_uefi\-firmware*  41_custom*
00_tuned*   01_users*           20_linux_xen*  30_os\-prober*     40_custom*         README
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
关于命令行示例中使用的“cd”、“cp”、“ls”等Linux命令，在随后的章节中会做详细介绍。另外，本书中使用CentOS和Ubuntu在配置上基本是相通的，所以更多使用CentOS做为示例。
.UNINDENT
.UNINDENT
.SS 内核
.sp
内核在系统启动时被加载到内存中，然后其常驻内存管理CPU和内存等系统资源并控制设备，调度进程等。内核为操作系统提供的基本功能，它决定了系统的功能与性能、并赋予Linux系统特征，它就是操作系统的核心程序。
.sp
内核的构成如下所示：
.INDENT 0.0
.IP \(bu 2
进程管理、用户管理、时钟管理、内存管理等主要部分
.IP \(bu 2
编译时静态链接到硬件的内核模块
.IP \(bu 2
编译时不链接到硬件，在系统启动时或启动后，在必要时读取并动态态链接到被硬件需要的内核模块
.UNINDENT
[图片]
.sp
可加载内核模块(Loadable Kernel Module)，可动态加载（loadable）从这个词义上来说，它的名字是这样的，其缩写为LKM。内核加载模块（Kernel Loadable Module）其缩写为KLM，或者被称为内核模块。
.sp
内核在/boot目录下存放，文件名称为“vmlinux\-version”，此文件为gzip压缩文件。
.sp
不同类型的可加载内核模块存放在/lib/modules/version/kernel目录下的子目录。
.SS 引导顺序中内核的处理过程
.sp
存储器中的内核在自动解压缩后由引导加载器GRUB2加载并执行内核中的初始化操作，其后内核解压缩并展开initramfs使其在内存中加载并运行，最后再运行systemd。
[图片]
.INDENT 0.0
.IP \(bu 2
内核中的初始化操作
.INDENT 2.0
.INDENT 3.5
内核在启动时对自己进行以下初始化操作：
.INDENT 0.0
.IP 1. 3
初始化分页机制
.IP 2. 3
初始化调度程序
.IP 3. 3
初始化计时器
.IP 4. 3
初始化中断机制
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
initramfs执行
.INDENT 2.0
.INDENT 3.5
initramfs(Inital RAM FS)是将磁盘中的根文件系统装载到根“/”、在引导时加载到内存中的袖珍文件系统。
.sp
它创建配置包含了磁盘设备驱动和文件系统模块的目录，用于访问创建在磁盘中的根文件系统。它是一个gzip压缩文件，可以使用cpio将其归档。他也被称为initrd（Initial RAM Disk）初始RAM磁盘。
.sp
initramfs文件在/boot目录下名为“initramfs\-version”(CentOS)，或者名为“initrd.img\-version”（Ubuntu）。
.sp
内核使用initramfs执行以下操作：
.INDENT 0.0
.IP 1. 3
将部署在内存中的initramfs加载为临时根文件系统
.IP 2. 3
启动initramfs中的init(systemd)程序，通过各种服务安装磁盘内的根文件系统
.IP 3. 3
将根文件系统从initramfs切换到磁盘中的根文件系统
.UNINDENT
.sp
\fB注解:\fP
.INDENT 0.0
.INDENT 3.5
有关cpio和gzip的相关信息，请参考第六章。
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
systemd再执行
.INDENT 2.0
.INDENT 3.5
内核重新运行磁盘中的根文件系统的/sbin/init程序。然后链接/sbin/init/lib/systemd/systemd程序服务，所以systemd被再次执行。
.UNINDENT
.UNINDENT
.UNINDENT
.SS systemd
.sp
systemd是内核生成的第一个用户进程，所以进程编号（PID）为“1”。
.sp
systemd根据配置文件，开始按照启动顺序依次启动，建立系统用户图形界面目标（graphical.target）或多用户目标（multi\-user.target）。我们能占用哪个目标呢？只有默认目标(default.target)可以在配置中指定。
.sp
在图形界面目标（graphical.target）的场景下，可以显示图形登录界面，登录桌面环境。
.sp
在多用户目标（multi\-user.target）的场景下，将会显示登录命令行界面，登录到没有桌面环境的CUI环境中。
.sp
目标(target)定义系统的状态，比如提供什么样的服务。systemd与早前Linux系统中使用的 SysV init功能相同。
.sp
除了graphical.target和multi\-user.target之外，还有用于维护系统的rescue目标（rescue.target）等其他多种目标。另外也有停止和重启系统的目标，于此我们在后面的章节再进行讲解。
[图片]
.TS
center;
|l|l|l|.
_
T{
目标
T}	T{
说明
T}	T{
SysV级别
T}
_
T{
default.target
T}	T{
系统启动时的默认目标，系统在这个目标中启动，通常指向multi\-user.target或graphical.target的链接
T}	T{
—
T}
_
T{
sysinit.target
T}	T{
进行系统启动时初期阶段设置目标
T}	T{
—
T}
_
T{
rescue.target
T}	T{
发生故障时或维护时管理者使用的目标。管理员输入root密码进行登录，然后进行维护工作
T}	T{
1
T}
_
T{
basic.target
T}	T{
在系统启动时进行基本设定的目标
T}	T{
—
T}
_
T{
multi.target
T}	T{
基于字符命令的多用户的目标
T}	T{
3
T}
_
T{
graphical.target
T}	T{
设置图形界面的目标
T}	T{
5
T}
_
.TE
.sp
在系统启动完成的阶段，会产生很多进程，systemd是在所有进程的结构中的根(root)。
.sp
\fB注意:\fP
.INDENT 0.0
.INDENT 3.5
SysV init所使用的运行级别是定义运行时服务的状态（级别：run）的术语。运行级别“0”为停止系统，运行级别“3”（multi\-user target）为字符终端登录，运行级别“5”（graphical target）为GUI图形界面登录，所有运行级别在systemd中都可以找到相对应的目标。
.UNINDENT
.UNINDENT
.SS 查看和设置默认目标
.sp
通过systemd命令可以查看那些目标被设置在default.target上，或更改default.target的设置。
.sp
下面是使用systemctl的子命令get\-default显示默认目标或使用子命令set\-default更改默认目标的示例：
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# systemctl get\-default ←查看默认目标
graphical.target
# systemctl set\-default multi\-user.target ←更改默认目标为字符终端登录
Removed /etc/systemd/system/default.target.
Created symlink /etc/systemd/system/default.target → /usr/lib/systemd/system/multi\-user.target.
# systemctl get\-default ←查看默认目标
multi\-user.target
.ft P
.fi
.UNINDENT
.UNINDENT
.SS 在引导加载程序GRUB2界面中指定目标
.sp
在引导加载程序的内核命令选项systemd.unit中，您也可以指定\(ga\(gasystemd.unit=multi.target\(ga\(ga。
.sp
或者，通过在内核命令行行尾添加运行级别“3”，也可以指定运行级别。通常在这种配置的情况下，此处的default.target的连接符号优先生效。
.SS 运行状态下目标的变更
.sp
使用systemctl命令的子命令isolate可以将当前正在运行的目标变更为另一个目标，执行init命令也同样生效。
.TS
center;
|l|l|l|.
_
T{
变更目标
T}	T{
systemctl isolate命令
T}	T{
init命令
T}
_
T{
变更为graphical.targer
T}	T{
systemctl isolate graphical.target
T}	T{
init 5
T}
_
T{
变更为multi\-user.targer
T}	T{
systemctl isolate multi\-user.target
T}	T{
init 3
T}
_
T{
变更为rescue.targer
T}	T{
systemctl isolate rescue.target
T}	T{
init 1
T}
_
.TE
.SS 登录
.sp
当系统引导完成后，窗口将会显示登录界面或字符登录提示。在此输入用户名和密码进行登录。
.sp
下面展示在救援目标，多用户目标和图形目标上启动时每个界面的显示的示例。
.sp
以下是CentOS中的救援目标的登录界面。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Welcome to rescue model Type "systemctl default" or ^D to enter default mode.
the "journalctl \-xb" to view system logs. Type "systemctl reboot" to reboot.
Give root password for maintenance
(or type Control\-D to continue): ← 在这里输入root密码
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以下是CentOS中的救援目标的登录界面。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
You are in rescue mode. After logging in, type "journalctl \-xb" to view
system logs. "systemctl reboot" to reboot, "systemctl default" ro "exit"
to boot into default mode.
Give root password for maintenance
(or type Control\-D to continue): ← 在这里输入root密码
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
在上述的界面中，输入root的密码进行登录。
.sp
下面是再多用户目标（没有桌面环境）下启动CentOS时显示的界面的示例。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
CentOS Linux 8 (Core)
Kernel 4.18.0\-80.11.2.el8_0.x86_64 on an x86_64

Activate the web console with: systemctl enable \-\-now cockpit.socket

centos login: ←在此输入用户名登录
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
下面是再多用户目标（没有桌面环境）下启动Ubuntu时显示的界面的示例。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
Ubuntu 18.04.3 LTS ubuntu tty1

ubuntu login: ←在此输入用户名登录
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
以下是以图形界面目标启动CentOS或Ubuntu时默认情况下的示例（CentOS和Ubuntu中登录界面是相同的）。
[图片]
.SS 在shell中的操作
.sp
登录后，在图形目标的情况下会显示图形界面桌面环境。在多用户目标和救援目标情况下，会显示基于shell的命令行提示符。
.sp
如果需要在桌面环境中执行Linux命令，请启动虚拟终端。如果没有桌面环境，请直接再shell命令提示符下执行命令。
[图片]
.sp
下面是再没有桌面环境的CUI界面中，以“centos”用户作为登录用户的示例。登录后运行了以下命令：
.INDENT 0.0
.IP \(bu 2
whoami：查看当前用户名
.IP \(bu 2
pwd：查看当前所在目录路径
.UNINDENT
[图片]
.SS 2.2 了解shell的使用
.SS shell
.sp
shell是linux内核与用户关联的用户界面。它解释用户输入的命令，请求内核执行并将结果返回给用户。shell也被称为命令解释器，因为它可以逐个接收并解释用户的指令。Linux的标准shell是bash，但是也可以使用其他shell。
[图片]
.sp
shell显示用户对命令的输入与输出。
.sp
在以下的示例中，将显示在bash shell的命令提示符“$”下运行“ls”命令，“ls”命令显示用户在当前的目录下的文件列表。打印出“file A”与“file B”两个文件的内容作为“ls”命令的执行结果。
[图片]
.SS 内部命令和外部命令
.sp
对于在命令提示符中输入的命令，可以分为外部命令和内部命令。
.INDENT 0.0
.IP \(bu 2
内部命令
.INDENT 2.0
.INDENT 3.5
是编译入shell内部的指令，如“cd”、“echo”等都是内部命令。
.UNINDENT
.UNINDENT
.IP \(bu 2
外部命令
.INDENT 2.0
.INDENT 3.5
不在shell内部，而是放在/usr/bin，/usr/sbin等目录下的命令。
.UNINDENT
.UNINDENT
.UNINDENT
[图片]
.sp
shell在shell的环境变量PATH注册的路径下寻找并运行外部命令。因为内部命令是shell内部的命令，所以不按照环境变量PATH即可执行。下面对设定PATH环境变量（下面的示例中/usr/bin与/usr/sbin目录被PATH环境变量注册）举例。
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
PATH=/usr/bin:/usr/sbin
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
因此，当您执行未注册在环境变量中的路径下的命令时，会提示“没有找到命令”（简体中文）或“command not found”（英文）。但是，您也使用绝对路径或相对路径“./”来执行指定的命令。
.SS shell变量和环境变量
.sp
在shell中有很多环境变量，常见有注册了外部命令的目录的PATH环境变量，显示语言环境是简体中文还是英文的LANG语言环境变量等。如果用户输入环境变量的值，则shell会变更该环境变量。
.sp
shell涉及到的变量有两种：shell变量和环境变量。
.INDENT 0.0
.IP \(bu 2
shell变量
.INDENT 2.0
.INDENT 3.5
仅使用shell设置的变量，子进程不继承。
.UNINDENT
.UNINDENT
.IP \(bu 2
环境变量
.INDENT 2.0
.INDENT 3.5
在shell外使用的和在外部命令中所使用的变量称为环境变量。子进程继承环境变量。我们可以将shell变量声明为环境变量。
.sp
通过export命令可以打印出环境变量中特别声明的指定参数。因此，子进程被设置为继承环境变量。由于启动的程序的子进程继承环境变量，所以我们可以从应用程序中使用环境变量。
.UNINDENT
.UNINDENT
.UNINDENT
.SH AUTHOR
renkeju
.SH COPYRIGHT
2019, renkeju
.\" Generated by docutils manpage writer.
.
