=====================
权限使用
=====================

管理文件所有者
-------------------

控制对Linux文件和目录的访问。首先，检查适当的权限或当前所有者的权限。

用户和用户组
^^^^^^^^^^^^^^^^^^^^^^^

用户必须至少属于一个组。有两种类型的组：主组和辅助组。用户必须分配一个主组，而辅助组是可选的。

.. csv-table:: 组类型
    :header: "组", "说明"
    :widths: 5 30

    "主组（必须的）", "用户刚登陆时的工作组，在创建文件或目录时作为其所属的主组"
    "辅助组（可选）", "如有必要，可以指定一个辅助组，可选多个"

要查看您所属的组，请使用 groups 命令。groups 命令没有选项。如果没有指定用户名，则显示执行命令的用用户的所属组。

.. code-block:: none 

    groups 用户名称

用户 renkeju 执行groups 命令的示例显示“所属组”的结果。

.. code-block:: none 

    $ groups
    renkeju wheel docker

在示例②中现实的所属组时root用户执行的结果。

.. code-block:: none 

    $ groups ⬅ ① 
    root
    $ groups renkeju ⬅ ②
    renkeju : renkeju wheel docker

① 未指定用户名，因此显示您所属的组

② 由于指定 renkeju 作为用户名，因此显示 renkeju 所属的所有组。

您也可以使用 id 命令来确定您是从哪个用户登录的，以及属于哪个组。

.. code-block:: none 

    id [选项] [用户名]

以下是 root 执行 id 命令的示例：

.. code-block:: none

    $ id
    uid=0(root) gid=0(root) groups=0(root)
    $ id renkeju
    uid=1000(renkeju) gid=1000(renkeju) groups=1000(renkeju),10(wheel),995(docker)

为用户的组指定用户ID（uid）和组ID（gid）以进行标识。如上所述结果所示，如果省略了用户名，则显示当前用户的信息。如果指定了用户名，则还会显示该用户的信息。用户“renkeju”被指定uid为1000。此外，主组为“renkeju”，gid为1000。请注意，id命令也显示辅助组的信息。

权限
^^^^^^^^^^^

您可以分别为每个文件或目录设置“允许谁”和“执行什么操作”。这可以称为权限。可以使用 ``ls -l`` 命令检查设置的权限。

.. image:: /_images/Chapter_3/3-3/3-3-1.确认权限.png
    :align: center

权限显示的内容分为以下几类：

.. image:: /_images/Chapter_3/3-3/3-3-2.权限.png
    :align: center

① 文件类型（这表示文件类型，而不是权限本身，主要类型如下表所示）

② 对用户（所有者）的权限

③ 所有组的权限 

④ 其他用户的权限

.. csv-table:: 主要文件类型
    :header: "类型", "说明"
    :widths: 5 5

    "-", "普通文件"
    "d", "目录"
    "i", "符号链接"

此外，“rw-”表示允许执行哪些操作。在“r”,“w”,“x”这些操作类型中，标识为“-”表示此操作不被允许。

下图显示了文件“Foo”的访问权限。“-rw-rw-r--”允许用户yuko读写普通文件。由于所有组是users，因此属于users的其他用户可以读写。也就是说，用户ryo可以读写。请注意，不属于 users 组的其他用户（在本例中的mana）只能读取。

.. image:: /_images/Chapter_3/3-3/3-3-3.文件Foo的访问权限.png
    :align: center

此外，“r”、“w”、“x”的含义因文件或目录而异。

.. csv-table:: 文件和目录之间的差异
    :header: "类型", "对于文件", "对于目录"
    :widths: 5 15 15

    "读取权限（r）", "more，cat和cp等命令可用于读取文件内容", "可以执行ls命令，例如查看目录内容"
    "写入权限（w）", "可用于编辑文件内容，例如vi", "可使用mkdir、touch、rm等创建和删除目录中的文件和目录"
    "执行权限（x）", "可执行文件", "可以使用cd命令切换到此目录"

请注意，目录的执行权限。使用cd命令从其他目录中移动时，如果该目录没有执行权限，则无法移动该目录。

变更权限
^^^^^^^^^^^^^^^^^

可以使用 chmod 命令更改现有文件或目录的权限设置，只有所有者或root能更改。

.. code-block:: none 

    chmod [选项] 模式 文件名称|目录名称

如果指定了“-R”选项，则权限将递归变更，包括子目录。在命令参数中可以指定两种模式：符号模式与八进制模式。

符号方式
"""""""""""""""""""

使用字符或符号变更权限。使用以下符号或字符：

.. image:: /_images/Chapter_3/3-3/3-3-4.符号方式.png
    :align: center

请参考下方示例：文件“mypg”的当前权限为“rw-rw-r--”。将其更改为“所有用户都可以读取和执行，只有所有者可以写入”的权限。文件的所有者为用户renkeju。

.. code-block:: none 

    $ ls -l ⬅ 检查权限
    -rw-rw-r--. 1 renkeju renkeju 0 Feb 23 23:03 mypg
    $ chmod a+x,g-w mypg ⬅ 在符号模式下更改权限
    -rwxr-xr-x. 1 renkeju renkeju 0 Feb 23 23:03 mypg

“a+x”表示“a”（所有用户）“+”（添加许可）具有“x”（可执行）的权限。结果为“所有用户都可以读取和执行”。此外，“g-w”表示所有者当前给予许可“w”（写入）的权限，因此不做更改，但所有组的“w”（写入）被“-”（消除许可），其最终结果是“只有所有者才能写入”。

八进制方式
""""""""""""""""""

使用八进制数字更改所需的权限。每个权限都有自己的编号。

.. image:: /_images/Chapter_3/3-3/3-3-5.八进制方式.png
    :align: center

也就是说，如果“rwx”全部被赋予权限，则为“7”，如果仅为“r”,则为“4”。在八进制模式下，通过组合此数字来指定权限。

如果将之前的符号模式的示例换成使用八进制模式操作：

.. code-block:: none 

    $ ls -l mypg
    -rw-rw-r--. 1 renkeju renkeju 0 Feb 23 23:20 mypg
    $ chmod 755 mypg
    $ ls -l mypg
    -rwxr-xr-x. 1 renkeju renkeju 0 Feb 23 23:20 mypg

umask值
^^^^^^^^^^^^^^^^^^^^

当用户创建新文件或目录时，会被赋予缺省权限。用户的默认权限由在shell变量中设置的umask值来确定。

使用umask命令查看当前设置的umask值。也可以通过更改umask值来更改默认使用的文件和目录权限。

.. code-block:: none

    umask [值]

以下结果时以用户renkeju和root的身份运行umask命令的示例。

.. code-block:: none

    $ umask
    0002

.. code-block:: none

    # umask
    0022

上面的示例以四位数字格式显示。本手册介绍了可实际用作umask值的后三位数。

所创建文件的权限是由创建文件的应用程序所指定的权限与每个进程在内核中保留的umask的值进行取反之和。umask值是指不希望为应用程序指定的权限按照“用户”、“组”、“其他”的方式分配权限。通常，应用程序创建时具有权限，允许您根据所创建的文件类型执行所有从操作。因此，如果umask值为002，则创建的文件和目录的缺省权限如下表所示。此外，umask值可以从父进程传递到子进程。

.. csv-table:: 文件和目录的缺省权限
    :header: "", "文件", "目录"
    :widths: 10 10 10

    "创建时由应用程序指定的权限", "666 rw-rw-rw-", "777 rwxrwxrwx"
    "umask值", "002 -------w-", "002 -------w-"
    "默认权限", "664 rw-rw-r--", "775 rwxrwxr-x"

在下面的示例中，典型用户 renkeju 创建了一个新文件和目录，并检查其权限。

.. code-block:: none 

    $ umask
    0002
    $ touch fileB
    $ mkdir dirB
    $ ls -l
    total 2
    drwxrwxr-x.  2 renkeju renkeju    6 Feb 23 23:35 dirB
    -rw-rw-r--.  1 renkeju renkeju    0 Feb 23 23:35 fileB

umask 命令不仅可以显示当前umask值，还可以更改当前umask值。

.. code-block:: none 

    $ umask
    0002
    $ umask 026
    $ umask
    0026
    $ touch fileC
    $ ls -l fileC
    -rw-r-----. 1 renkeju renkeju 0 Feb 23 23:37 fileC

在上面的示例中，更改umask值后将创建一个新文件。如果您查看fileC的权限，则会发现它是“rw-r-----”。"rw-"为“420”，八进制的“6”.“r--”为“400”，八进制得“4”。“---”为“000”，八进制得“0”。换句话说，如果将umask值更改为“026”，则新创建的文件的默认权限将从“664”更改为您所看到的“640”。

.. note:: umask命令中的更改仅适用于已进行更改的shell及其子进程。如果要修改其作为默认设置，则必须使用shell配置文件进行更改。

更改文件所有者和组
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

使用 chown 命令更改指定文件的所有者和组，此命令仅适用于root用户指定新的用户名作为文件或目录的所有者。

.. code-block:: none 

    chown [选项] 用户名[.组名] 文件名称|目录名称

如果使用“-R”选项指定目录，则权限会以递归的方式变更，包括子目录。

如果不仅要更改所有者，还要更改组，请将chown命令的参数指定为“更改的所有者的名称.更改的用户组的名称”。组名必须以“.”（点）或“:”（冒号）开头。如果使用 chown 命令只更改组，请指定“chown :更改的用户组的名称 文件名称”而不必指定用户名。

以下示例中，所有者更改了文件renkeju，root更改了所有者和组。只有root才能更改所有者。

.. code-block:: none 

    # ls -l fileA fileB 
    -rw-rw-r--. 1 renkeju renkeju 0 Feb 23 23:56 fileA
    -rw-rw-r--. 1 renkeju renkeju 0 Feb 23 23:56 fileB
    # chown ryo fileA ⬅ ①
    # chown ryo.users fileB ⬅ ②
    # ls -l
    -rw-rw-r--. 1 ryo renkeju 0 Feb 23 23:57 fileA
    -rw-rw-r--. 1 ryo users   0 Feb 23 23:57 fileB

① 将文件“fileA”的所有者从renkeju更改为ryo

② 将文件“fileB”的所有者从renkeju更改为ryo，将组从renkeju更改为users

此外，还有一个 chgrp 命令，用于仅修改用户组。与 chown 不同，即使不是 root 用户，属于该组的用户也可以执行此操作。请注意以下事项：

* root 可以修改组，包括所有者不是自己的文件也可以修改。另外，变更对象的组名，即使时自己不属于的组也可以指定。

* 一般用户只能由所有者更改自己的所属组。另外，变更对象的组名只能指定自己所属的组。

.. code-block:: none 

    chgrp [选项] 组名称 文件名称|目录名称

如果在目录中指定了“-R”选项指定目录，则权限会以递归的方式变更，包括子目录。


.. code-block:: none 

    $ ls -l fileA
    -rw-rw-r--. 1 renkeju renkeju 0 Feb 23 23:56 fileA
    $ chgrp docker fileA
    $ ls -l fileA
    -rw-rw-r--. 1 renkeju docker 0 Feb 23 23:56 fileA

创建链接
--------------

链接类似于Microsoft Windows 中的快捷方式，允许同一个文件具有两个不同的名称。因此，它指向的不是数据的拷贝，而是相同的数据。由两种类型的链接：硬链接和符号链接。在这两种情况下，都使用ln命令创建链接。

.. code-block:: none

    ln 原始文件名称 链接名称
    ln -s 原始文件名称 链接名称

创建硬链接
^^^^^^^^^^^^^^^^^^^^^^^

以下示例将fileY创建为文件fileX的硬链接。这相当于使用cat命令显示每个内容，它们还使用相同的inode编号。要查看inode，请将ls命令与i选项一起使用。

.. code-block:: none 

    $ ls fileX
    fileX
    $ ln fileX fileY ⬅ 创建硬链接
    $ cat fileY ⬅ 查看“fileY”文件的内容
    hello
    $ cat fileX ⬅ 查看“fileX”文件的内容
    hello
    $ ls -li file* ⬅ 检查 inode
    1241225 -rw-rw-r--. 2 renkeju renkeju 6 Feb 24 09:43 fileX
    1241225 -rw-rw-r--. 2 renkeju renkeju 6 Feb 24 09:43 fileY

.. image:: /_images/Chapter_3/3-3/3-3-7.硬链接.png
    :align: center

此外，以下示例还使用rm命令删除了文件“fileX”。但是，由于inode未被删除，因此您仍然还可以访问到链接“fileY”文件中的数据。

.. code-block:: none 

    $ rm fileX
    $ cat fileY
    hello
    
您不能为目录创建硬链接。以下示例验证在尝试创建目录的硬链接时是否会出现错误。

.. code-block:: none

    $ ls -ld mydir
    drwxrwxr-x. 2 renkeju renkeju 6 Feb 24 09:54 mydir
    $ ln mydir mydir_link
    ln: ‘mydir’: hard link not allowed for directory

硬链接具有以下特性：

* 链接使用与原始文件相同的inode编号
* 无法基于目录创建链接
* 由于inode编号在同一文件系统中是唯一编号，因此无法为不同的分区创建硬链接

创建符号链接
^^^^^^^^^^^^^^^^^^^^^

以下示例创建了符号链接，但请确保使用了不同的inode编号，并且在运行 ``ls -l`` 时，符号链接文件显示为“链接名称 -> 原始文件名称”，并且权限的开头显示符号链接文件的文件类型为“l”。

.. code-block::NONE 

    $ ls fileX
    fileX
    $ ln -s fileX fileY ⬅ 创建软连接
    $ cat fileX  ⬅ 查看“fileX”文件中的内容
    hello
    $ cat fileY  ⬅ 查看“fileY”文件中的内容
    hello
    $ ls -li file* ⬅ 检查文件的inode编号
    1241225 -rw-rw-r--. 1 renkeju renkeju 6 Feb 24 09:43 fileX
    1235959 lrwxrwxrwx. 1 renkeju renkeju 5 Feb 24 10:04 fileY -> fileX

.. image:: /_images/Chapter_3/3-3/3-3-8.符号链接.png
    :align: center

此外，请注意，如果删除原始文件（fileX），则会导致错误，因为链接本身没有引用（原始文件的位置）。

.. code-block:: none

    $ rm fileX
    $ cat fileY
    cat: fileY: No such file or directory

您也可以创建指向目录的符号链接。下面的示例创建目录的符号链接：

.. code-block:: none

    $ ls -ld mydir
    drwxrwxr-x. 2 renkeju renkeju 6 Feb 24 09:54 mydir
    $ ln -s mydir mydir_link
    $ ls -ld mydir*
    drwxrwxr-x. 2 renkeju renkeju 6 Feb 24 09:54 mydir
    lrwxrwxrwx. 1 renkeju renkeju 5 Feb 24 10:07 mydir_link -> mydir

符号链接的特点如下：

* 链接使用的inode与原始文件具体的编号不同
* 可以基于目录创建链接
* 可以链接到原始文件和其他分区
* 权限以文件类型“l”开头，表示符号链接

查找命令和文件
----------------------

Linux提供了许多用于搜索的命令，根据搜索的用途使用不同命令。

查找文件
^^^^^^^^^^^^^^^^

find命令在指定目录下查找符合指定搜索条件的文件。find可以利用表达式来指定各种条件。表达式由选项、条件表达式和操作组成。如果省略路径和表达式，则显示当前目录下的所有文件/目录。以下时一些使用案例：

.. code-block:: none

    find [路径] [公式]

.. csv-table:: find命令的常用表达式
    :header: "公式", "说明"
    :widths: 5 30

    "-name", "按指定的文件名搜索"
    "-type", "按文件类型搜索。主要类型如下：d（目录）、f（常规文件）、l（符号链接）"
    "-size", "按指定块大小搜索"
    "-atime", "根据指定的日期和时间搜索上次访问的文件"
    "-mtime", "根据指定的日期和时间搜索上次更新的文件"
    "-print", "标准输出搜索结果"
    "-exec command \;", "搜索后执行命令（command）"

* ``find . -name core``

    在当前目录下搜索名为“core”的文件

* ``find / -mtime 7``

    在“/”目录下，查找7天前上次更新的文件

* ``find / -mtime +7``

    在“/”目录下，查找7天以上上次更新的文件

* ``find / -atime -7``

    在“/”目录下，查找最近7天以内访问的文件

* ``find . -type l``

    在当前目录搜索符号链接

在第二个和第三个示例中，使用“-mtime”可以基于上次更新的日期和时间进行查找，使用“-atime”可以基于上次访问的日期和时间进行查找。另外，在指定日期和时间时，数字前可以有“什么都不加”、“+”和“-”三种方式。

.. image:: /_images/Chapter_3/3-3/3-3-9.指定日期.png
    :align: center

以下示例演示了如何在CentOS中结合使用find和xargs命令。当前目录中有一个目录和两个常规文件。尝试使用find和xargs命令搜索此目录并删除文件，但出现错误，因为“file B”文件名称中包含空格。

.. code-block:: none 

    $ ls
    dirA  fileA  file B
    $ find . -type f | xargs rm
    rm: cannot remove ‘./file’: No such file or directory
    rm: cannot remove ‘B’: No such file or directory
    $ ls
    dirA  file B

xargs 命令读取由空格或换行符分隔的字符串。因此，在上面的示例中，“fileB”被拆分为“file”和“B”，作为xargs的标准输入读取，并显示一条错误信息，只是rm命令无法找到要删除的文件。以下示例说明如何查找包含空格的文件名并将其传递给xargs：

.. code-block:: none

    $ find . -type f -print0 | xargs -0 rm
    $ ls
    dirA

find命令在运行时提供“-print0”作为表达式。使用“-print0”可以在文件分隔符中嵌入空字符，而不是空格或换行符。此外，xargs命令中的“-0”选项从标准输入中读取字符串，并将空字符作为分隔符，而不是空格。因此，也可以删除上述包含空格的文件。因此，“-print0”与xargs命令的“-0”选项相对应。

文件索引搜索
^^^^^^^^^^^^^^^^^

locate 命令搜索文件的方式与find命令相同。在命令参数指定的模式中也可以像shell中使用元字符。此外，如果该字符串是不包含元字符的常规字符串，则必须显示包含该字符串的所有文件名和目录名。

.. code-block:: none 

    locate [选项] [路径]文件名称|目录名称

.. code-block:: none 

    $ locate dirA
    /home/renkeju/test/dirA

locate命令使用包含文件名称和目录名称的列表的数据库的索引实现快速搜索。但是，如果不更新数据库，每天更新的文件和目录就会排除在搜索范围之外。使用updatedb命令可以更新数据库。

.. note:: anacron每天运行一次 ``/etc/cron.daily/mlocate`` 脚本，并在其中执行updatedb命令。

.. csv-table:: updatedb 命令选项
    :header: "选项", "说明"
    :widths: 5 30

    "-e", "指定不包含在数据库文件列表中的目录路径"
    "-o", "指定要更新的数据库名称，用于指定自己创建的数据库"

.. note:: CentOS 和 Ubuntu 的默认值均为 ``/var/lib/mlocate/mlocate.db``

如果要使用updatedb命令从创建的数据库中删除某个目录的索引，则可以使用 ``updatedb -e 目录名称`` 命令进行该操作，并在 updatedb 命令的配置文件 “/etc/updatedb.conf” 中配置与该目录相关的配置信息。如果以不带参数的形式运行 updatedb 命令，则为默认使用 ``/etc/updatedb.conf`` 配置文件进行更新数据库。

.. code-block:: none 

    $ cat /etc/updatedb.conf
    PRUNE_BIND_MOUNTS = "yes"
    PRUNEFS = "9p afs anon_inodefs auto autofs bdev binfmt_misc cgroup cifs coda configfs cpuset debugfs devpts ecryptfs exofs fuse fuse.sshfs fusectl gfs gfs2 gpfs hugetlbfs inotifyfs iso9660 jffs2 lustre mqueue ncpfs nfs nfs4 nfsd pipefs proc ramfs rootfs rpc_pipefs securityfs selinuxfs sfs sockfs sysfs tmpfs ubifs udf usbfs fuse.glusterfs ceph fuse.ceph"     PRUNENAMES = ".git .hg .svn"
    PRUNEPATHS = "/afs /media /mnt /net /sfs /tmp /udev /var/cache/ccache /var/lib/yum/yumdb /var/spool/cups /var/spool/squid /var/tmp /var/lib/ceph"

“PRUNEFS”列出了构建数据库时不想更新包含的文件系统类型。“PRUNEPATHS”列出了构建数据库时不想更新包含的目录路径。

查找命令
^^^^^^^^^^^^^^^^^^^^^

which 命令根据环境变量PATH指定的目录查找指定目录的存储目录。环境变量PATH是一个变量，用于保存要使用的程序（命令）的路径。命令将查找在PATH中注册的位置，并在找到相应的文件时执行。也就是说，即使安装了所需的命令，如果PATH中没有该命令的位置，也无法执行该命令（但是，您也可以使用绝对路径指定命令）。

.. code-block:: none 

    which [选项] 命令名称

.. csv-table:: which 命令选项
    :header: "选项", "说明"
    :widths: 5 30

    "-a", "不仅表示最初发现的，还表示与环境变量PATH一致的所有内容"
    "-i", "从标准输入中读取别名并显示匹配项"

以下示例①显示了如何使用which命令搜索只有root用户可以使用的usermod命令。

.. code-block:: none 

    # echo $PATH
    /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
    # which usermod
    /sbin/usermod

在示例②中，搜索一般用户renkeju的$PATH中的usermod命令所在的位置，将会显示一条报错信息：找不到usermod命令。

.. code-block:: none

    $ echo $PATH
    /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/renkeju/.local/bin:/home/renkeju/bin
    $ which usermod
    /usr/bin/which: no usermod in (/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/renkeju/.local/bin:/home/renkeju/bin)

查找二进制文件，源文件和手册的位置
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

whereis 命令显示指定命令的二进制文件，源代码文件和手册所在位置。

.. code-block:: none 

    whereis [选项] 命令名称

.. csv-table:: none 
    :header: "选项", "说明"
    :widths: 5 15

    "-b", "显示二进制（可执行文件）位置"
    "-m", "显示文档位置"
    "-s", "显示源文件位置"

以下示例使用whereis命令显示which命令的二进制文件和手册所在位置。

.. code-block:: none 

    $ whereis which
    which: /usr/bin/which /usr/share/man/man1/which.1.gz